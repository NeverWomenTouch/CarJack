function ElementFunction:AddToggleColorPicker(ToggleColorPickerConfig)
    ToggleColorPickerConfig = ToggleColorPickerConfig or {}
    ToggleColorPickerConfig.Name = ToggleColorPickerConfig.Name or "Toggle Color Picker"
    ToggleColorPickerConfig.Default = ToggleColorPickerConfig.Default or false
    ToggleColorPickerConfig.ColorPickerDefault = ToggleColorPickerConfig.ColorPickerDefault or Color3.fromRGB(255,0,0)
    ToggleColorPickerConfig.Callback = ToggleColorPickerConfig.Callback or function() end
    ToggleColorPickerConfig.Flag = ToggleColorPickerConfig.Flag or nil
    ToggleColorPickerConfig.Save = ToggleColorPickerConfig.Save or false

    local ColorH, ColorS, ColorV = 1, 1, 1
    local RainbowEnabled = false
    local RainbowConnection
    local ToggleColorPicker = {Value = ToggleColorPickerConfig.Default, ColorValue = ToggleColorPickerConfig.ColorPickerDefault, Toggled = false, Type = "ToggleColorPicker", Save = ToggleColorPickerConfig.Save}

    local SWITCH_WIDTH = 46
    local SWITCH_HEIGHT = 24
    local CIRCLE_SIZE = 18
    local PADDING = 3

    local ColorSelection = Create("ImageLabel", {
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(select(3, Color3.toHSV(ToggleColorPicker.ColorValue))),
        ScaleType = Enum.ScaleType.Fit,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "http://www.roblox.com/asset/?id=4805639000"
    })

    local HueSelection = Create("ImageLabel", {
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(0.5, 0, 1 - select(1, Color3.toHSV(ToggleColorPicker.ColorValue))),
        ScaleType = Enum.ScaleType.Fit,
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "http://www.roblox.com/asset/?id=4805639000"
    })

    local Color = Create("ImageLabel", {
        Size = UDim2.new(1, -25, 1, -85),
        Position = UDim2.new(0, 0, 0, 0),
        Visible = false,
        Image = "rbxassetid://4155801252"
    }, {
        Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
        ColorSelection
    })

    local Hue = Create("Frame", {
        Size = UDim2.new(0, 20, 1, -85),
        Position = UDim2.new(1, -20, 0, 0),
        Visible = false
    }, {
        Create("UIGradient", {Rotation = 270, Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)), ColorSequenceKeypoint.new(0.20, Color3.fromRGB(234, 255, 0)), ColorSequenceKeypoint.new(0.40, Color3.fromRGB(21, 255, 0)), ColorSequenceKeypoint.new(0.60, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.80, Color3.fromRGB(0, 17, 255)), ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 0, 251)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))},}),
        Create("UICorner", {CornerRadius = UDim.new(0, 5)}),
        HueSelection
    })

    local RainbowCheckbox = Create("Frame", {
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(1, -25, 1, -40),
        BackgroundColor3 = Color3.fromRGB(25, 25, 30),
        BorderSizePixel = 0,
        Visible = false,
        Name = "RainbowCheckbox"
    })

    Create("UICorner", {
        CornerRadius = UDim.new(0, 4),
        Parent = RainbowCheckbox
    })

    local checkboxStroke = Create("UIStroke", {
        Color = Color3.fromRGB(100, 100, 105),
        Thickness = 1.5,
        Transparency = 0,
        Parent = RainbowCheckbox
    })

    local CheckMark = Create("ImageLabel", {
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "rbxassetid://3926305904",
        ImageColor3 = Color3.fromRGB(255, 0, 255),
        ImageTransparency = 1,
        Parent = RainbowCheckbox,
        Name = "CheckMark"
    })

    local checkboxGlow = Create("Frame", {
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 0, 255),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ZIndex = 0,
        Parent = RainbowCheckbox,
        Name = "Glow"
    })

    Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = checkboxGlow
    })

    local rainbowClickDetector = Create("TextButton", {
        Size = UDim2.new(1, 10, 1, 10),
        Position = UDim2.new(0, -5, 0, -5),
        BackgroundTransparency = 1,
        Text = "",
        Parent = RainbowCheckbox
    })

    local RainbowLabel = AddThemeObject(Create("TextLabel", {
        Size = UDim2.new(0, 100, 0, 18),
        Position = UDim2.new(1, -120, 1, -40),
        BackgroundTransparency = 1,
        Text = "Rainbow Mode",
        TextColor3 = Color3.fromRGB(200, 200, 205),
        TextSize = 13,
        Font = Enum.Font.GothamMedium,
        TextXAlignment = Enum.TextXAlignment.Right,
        Visible = false,
        Name = "RainbowLabel"
    }), "TextDark")

    local ColorpickerContainer = Create("Frame", {
        Position = UDim2.new(0, 0, 0, 32),
        Size = UDim2.new(1, 0, 1, -32),
        BackgroundTransparency = 1,
        ClipsDescendants = true
    }, {
        Hue,
        Color,
        RainbowCheckbox,
        RainbowLabel,
        Create("UIPadding", {
            PaddingLeft = UDim.new(0, 35),
            PaddingRight = UDim.new(0, 35),
            PaddingBottom = UDim.new(0, 15),
            PaddingTop = UDim.new(0, 17)
        })
    })

    local Click = SetProps(MakeElement("Button"), {
        Size = UDim2.new(1, 0, 1, 0)
    })

    local ToggleSwitch = Create("Frame", {
        Size = UDim2.new(0, SWITCH_WIDTH, 0, SWITCH_HEIGHT),
        Position = UDim2.new(1, -SWITCH_WIDTH - 12, 0.5, 0),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = ToggleColorPicker.Value and Color3.fromRGB(255, 0, 255) or Color3.fromRGB(15, 15, 15),
        BorderSizePixel = 0,
        Name = "Switch"
    })

    local switchClickDetector = Create("TextButton", {
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Text = "",
        Parent = ToggleSwitch
    })

    Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ToggleSwitch
    })

    local switchStroke = Create("UIStroke", {
        Color = Color3.fromRGB(255, 0, 255),
        Thickness = 1,
        Transparency = ToggleColorPicker.Value and 1 or 0.3,
        Parent = ToggleSwitch
    })

    local ToggleCircle = Create("Frame", {
        Size = UDim2.new(0, CIRCLE_SIZE, 0, CIRCLE_SIZE),
        Position = UDim2.new(0, PADDING, 0, PADDING),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = ToggleSwitch,
        Name = "Circle"
    })

    Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ToggleCircle
    })

    if ToggleColorPicker.Value then
        ToggleCircle.Position = UDim2.new(0, SWITCH_WIDTH - CIRCLE_SIZE - PADDING, 0, PADDING)
    else
        ToggleCircle.Position = UDim2.new(0, PADDING, 0, PADDING)
    end

    local ColorpickerBox = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 4), {
        Size = UDim2.new(0, 24, 0, 24),
        Position = UDim2.new(1, -SWITCH_WIDTH - 20, 0.5, 0),
        AnchorPoint = Vector2.new(1, 0.5)
    }), {
        AddThemeObject(MakeElement("Stroke"), "Stroke")
    }), "Main")

    local ToggleColorPickerFrame = AddThemeObject(SetChildren(SetProps(MakeElement("RoundFrame", Color3.fromRGB(255, 255, 255), 0, 5), {
        Size = UDim2.new(1, 0, 0, 38),
        Parent = ItemParent
    }), {
        SetProps(SetChildren(MakeElement("TFrame"), {
            AddThemeObject(SetProps(MakeElement("Label", ToggleColorPickerConfig.Name, 15), {
                Size = UDim2.new(1, -12, 1, 0),
                Position = UDim2.new(0, 12, 0, 0),
                Font = Enum.Font.GothamBold,
                Name = "Content"
            }), "Text"),
            ColorpickerBox,
            Click,
            ToggleSwitch,
            AddThemeObject(SetProps(MakeElement("Frame"), {
                Size = UDim2.new(1, 0, 0, 1),
                Position = UDim2.new(0, 0, 1, -1),
                Name = "Line",
                Visible = false
            }), "Stroke"), 
        }), {
            Size = UDim2.new(1, 0, 0, 38),
            ClipsDescendants = true,
            Name = "F"
        }),
        ColorpickerContainer,
        AddThemeObject(MakeElement("Stroke"), "Stroke"),
    }), "Second")

    local function updateRainbowCheckbox()
        if RainbowEnabled then
            TweenService:Create(RainbowCheckbox, TweenInfo.new(0.35, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                BackgroundColor3 = Color3.fromRGB(255, 0, 255),
                Size = UDim2.new(0, 20, 0, 20)
            }):Play()
            TweenService:Create(checkboxStroke, TweenInfo.new(0.35, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                Color = Color3.fromRGB(255, 0, 255),
                Transparency = 0,
                Thickness = 2
            }):Play()
            TweenService:Create(CheckMark, TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
                ImageTransparency = 0,
                Size = UDim2.new(0, 14, 0, 14),
                Rotation = 360
            }):Play()
            TweenService:Create(RainbowLabel, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                TextColor3 = Color3.fromRGB(255, 255, 255),
                Position = UDim2.new(1, -163, 1, -35)
            }):Play()
            TweenService:Create(checkboxGlow, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                BackgroundTransparency = 0.7,
                Size = UDim2.new(0, 30, 0, 30)
            }):Play()
            spawn(function()
                wait(0.15)
                TweenService:Create(checkboxGlow, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 24, 0, 24)
                }):Play()
            end)
            spawn(function()
                wait(0.2)
                TweenService:Create(RainbowCheckbox, TweenInfo.new(0.25, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
                    Size = UDim2.new(0, 18, 0, 18)
                }):Play()
            end)
        else
            TweenService:Create(RainbowCheckbox, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                BackgroundColor3 = Color3.fromRGB(25, 25, 30),
                Size = UDim2.new(0, 18, 0, 18)
            }):Play()
            TweenService:Create(checkboxStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
                Color = Color3.fromRGB(100, 100, 105),
                Transparency = 0,
                Thickness = 1.5
            }):Play()
            TweenService:Create(CheckMark, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                ImageTransparency = 1,
                Size = UDim2.new(0, 10, 0, 10),
                Rotation = 0
            }):Play()
            TweenService:Create(RainbowLabel, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
                TextColor3 = Color3.fromRGB(200, 200, 205),
                Position = UDim2.new(1, -158, 1, -35)
            }):Play()
        end
    end

    local function startRainbow()
        if RainbowConnection then
            RainbowConnection:Disconnect()
        end
        RainbowConnection = AddConnection(RunService.Heartbeat, function()
            local hue = (tick() % 5) / 5
            local rainbowColor = Color3.fromHSV(hue, 1, 1)
            ToggleColorPicker.ColorValue = rainbowColor
            ColorpickerBox.BackgroundColor3 = rainbowColor
            ToggleColorPickerConfig.Callback(ToggleColorPicker.ColorValue, ToggleColorPicker.Value)
        end)
    end

    local function stopRainbow()
        if RainbowConnection then
            RainbowConnection:Disconnect()
            RainbowConnection = nil
        end
    end

    local function updateToggle(animate)
        local targetColor = ToggleColorPicker.Value and Color3.fromRGB(255, 0, 255) or Color3.fromRGB(15, 15, 15)
        local targetPos = ToggleColorPicker.Value and 
            UDim2.new(0, SWITCH_WIDTH - CIRCLE_SIZE - PADDING, 0, PADDING) or 
            UDim2.new(0, PADDING, 0, PADDING)
        local targetStrokeTransparency = ToggleColorPicker.Value and 1 or 0.3

        if animate then
            local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
            
            TweenService:Create(ToggleSwitch, tweenInfo, {
                BackgroundColor3 = targetColor
            }):Play()
            
            TweenService:Create(ToggleCircle, tweenInfo, {
                Position = targetPos
            }):Play()
            
            TweenService:Create(switchStroke, tweenInfo, {
                Transparency = targetStrokeTransparency
            }):Play()
        else
            ToggleSwitch.BackgroundColor3 = targetColor
            ToggleCircle.Position = targetPos
            switchStroke.Transparency = targetStrokeTransparency
        end
    end

    local function doToggle()
        ToggleColorPicker.Value = not ToggleColorPicker.Value
        updateToggle(true)
        ToggleColorPickerConfig.Callback(ToggleColorPicker.ColorValue, ToggleColorPicker.Value)
    end

    AddConnection(switchClickDetector.MouseButton1Click, function()
        doToggle()
    end)

    AddConnection(switchClickDetector.MouseEnter, function()
        TweenService:Create(ToggleSwitch, TweenInfo.new(0.2, Enum.EasingStyle.Quart), {
            BackgroundColor3 = ToggleSwitch.BackgroundColor3:Lerp(Color3.fromRGB(255, 255, 255), 0.15)
        }):Play()
        
        if not ToggleColorPicker.Value then
            TweenService:Create(switchStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quart), {
                Transparency = 0.1
            }):Play()
        end
    end)

    AddConnection(switchClickDetector.MouseLeave, function()
        TweenService:Create(ToggleSwitch, TweenInfo.new(0.2, Enum.EasingStyle.Quart), {
            BackgroundColor3 = ToggleColorPicker.Value and Color3.fromRGB(255, 0, 255) or Color3.fromRGB(15, 15, 15)
        }):Play()
        
        TweenService:Create(switchStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quart), {
            Transparency = ToggleColorPicker.Value and 1 or 0.3
        }):Play()
    end)

    AddConnection(rainbowClickDetector.MouseEnter, function()
        if not RainbowEnabled then
            TweenService:Create(checkboxStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                Color = Color3.fromRGB(150, 150, 155),
                Thickness = 2
            }):Play()
            TweenService:Create(RainbowCheckbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                Size = UDim2.new(0, 19, 0, 19)
            }):Play()
        end
    end)

    AddConnection(rainbowClickDetector.MouseLeave, function()
        if not RainbowEnabled then
            TweenService:Create(checkboxStroke, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                Color = Color3.fromRGB(100, 100, 105),
                Thickness = 1.5
            }):Play()
            TweenService:Create(RainbowCheckbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                Size = UDim2.new(0, 18, 0, 18)
            }):Play()
        end
    end)

    AddConnection(rainbowClickDetector.MouseButton1Click, function()
        RainbowEnabled = not RainbowEnabled
        updateRainbowCheckbox()
        
        if RainbowEnabled then
            startRainbow()
        else
            stopRainbow()
        end
    end)

    AddConnection(Click.MouseButton1Click, function()
        ToggleColorPicker.Toggled = not ToggleColorPicker.Toggled
        TweenService:Create(ToggleColorPickerFrame,TweenInfo.new(.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),{Size = ToggleColorPicker.Toggled and UDim2.new(1, 0, 0, 220) or UDim2.new(1, 0, 0, 38)}):Play()
        Color.Visible = ToggleColorPicker.Toggled
        Hue.Visible = ToggleColorPicker.Toggled
        RainbowCheckbox.Visible = ToggleColorPicker.Toggled
        RainbowLabel.Visible = ToggleColorPicker.Toggled
        ToggleColorPickerFrame.F.Line.Visible = ToggleColorPicker.Toggled
    end)

    local function UpdateColorPicker()
        if not RainbowEnabled then
            local newColor = Color3.fromHSV(ColorH, ColorS, ColorV)
            ColorpickerBox.BackgroundColor3 = newColor
            Color.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
            ToggleColorPicker:SetColor(newColor)
            ToggleColorPickerConfig.Callback(ToggleColorPicker.ColorValue, ToggleColorPicker.Value)
            if ToggleColorPickerConfig.Save then
                SaveCfg(game.GameId)
            end
        end
    end

    local function UpdateHSV()
        local h, s, v = Color3.toHSV(ToggleColorPicker.ColorValue)
        ColorH = h
        ColorS = s
        ColorV = v
        HueSelection.Position = UDim2.new(0.5, 0, 1 - h, 0)
        ColorSelection.Position = UDim2.new(s, 0, 1 - v, 0)
    end

    UpdateHSV()

    AddConnection(Color.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not RainbowEnabled then
            if ColorInput then
                ColorInput:Disconnect()
            end
            ColorInput = AddConnection(RunService.RenderStepped, function()
                local ColorX = (math.clamp(Mouse.X - Color.AbsolutePosition.X, 0, Color.AbsoluteSize.X) / Color.AbsoluteSize.X)
                local ColorY = (math.clamp(Mouse.Y - Color.AbsolutePosition.Y, 0, Color.AbsoluteSize.Y) / Color.AbsoluteSize.Y)
                ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
                ColorS = ColorX
                ColorV = 1 - ColorY
                UpdateColorPicker()
            end)
        end
    end)

    AddConnection(Color.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            if ColorInput then
                ColorInput:Disconnect()
            end
        end
    end)

    AddConnection(Hue.InputBegan, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not RainbowEnabled then
            if HueInput then
                HueInput:Disconnect()
            end

            HueInput = AddConnection(RunService.RenderStepped, function()
                local HueY = (math.clamp(Mouse.Y - Hue.AbsolutePosition.Y, 0, Hue.AbsoluteSize.Y) / Hue.AbsoluteSize.Y)
                HueSelection.Position = UDim2.new(0.5, 0, HueY, 0)
                ColorH = 1 - HueY
                UpdateColorPicker()
            end)
        end
    end)

    AddConnection(Hue.InputEnded, function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            if HueInput then
                HueInput:Disconnect()
            end
        end
    end)

    function ToggleColorPicker:Set(Value)
        ToggleColorPicker.Value = Value
        updateToggle(true)
        ToggleColorPickerConfig.Callback(ToggleColorPicker.ColorValue, ToggleColorPicker.Value)
    end

    function ToggleColorPicker:SetColor(Value)
        ToggleColorPicker.ColorValue = Value
        ColorpickerBox.BackgroundColor3 = ToggleColorPicker.ColorValue
        UpdateHSV()
    end

    updateToggle(false)
    ToggleColorPicker:SetColor(ToggleColorPicker.ColorValue)
    if ToggleColorPickerConfig.Flag then				
        OrionLib.Flags[ToggleColorPickerConfig.Flag] = ToggleColorPicker
    end			
    return ToggleColorPicker
end
