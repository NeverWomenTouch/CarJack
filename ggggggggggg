--!nocheck
-- luacheck: globals cloneref isfile isfolder makefolder writefile readfile listfiles delfile Color3 Enum game UDim2 Vector2 Rect
local cloneref = cloneref or function(x) return x end
local function SRV(name) return cloneref(game:GetService(name)) end
local CoreGui = SRV("CoreGui")
local TweenService = SRV("TweenService")
local TextService = SRV("TextService")
local UserInputService = SRV("UserInputService")
local HttpService = SRV("HttpService")
local MarketplaceService = SRV("MarketplaceService")
local _isfile = (isfile or function() return false end)
local _isfolder = (isfolder or function() return false end)
local _makefolder = (makefolder or function() end)
local _writefile = (writefile or function() end)
local _readfile = (readfile or function() return "" end)
local _listfiles = (listfiles or function() return {} end)
local _delfile = (delfile or function() end)
local function Create(className, props, children)
    local inst = Instance.new(className)
    if props then for k, v in pairs(props) do inst[k] = v end end
    if children then for _, c in ipairs(children) do c.Parent = inst end end
    return inst
end
local function Round(num, inc) inc = inc or 1 return math.floor(num / inc + 0.5) * inc end
local function Clamp(v, a, b) return (v < a and a) or (v > b and b) or v end
local Theme = {
    Bg = Color3.fromRGB(12, 14, 13),
    Panel = Color3.fromRGB(18, 20, 19),
    Stroke = Color3.fromRGB(34, 38, 36),
    Accent = Color3.fromRGB(0, 255, 170),
    Accent2 = Color3.fromRGB(0, 220, 150),
    Text = Color3.fromRGB(235, 238, 236),
    SubText = Color3.fromRGB(158, 165, 160),
    Hover = Color3.fromRGB(32, 36, 34),
    Button = Color3.fromRGB(26, 28, 27),
    Good = Color3.fromRGB(0, 255, 170),
    Warn = Color3.fromRGB(240, 180, 70),
    Bad = Color3.fromRGB(235, 80, 90),
    Scrollbar = Color3.fromRGB(50, 54, 52),
}
local Fonts = {
    Regular = Enum.Font.Gotham,
    Medium = Enum.Font.GothamMedium,
    Bold = Enum.Font.GothamBold,
}
local function T(i, t, p) return TweenService:Create(i, TweenInfo.new(t, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), p) end
local Config = {}
do
    local function sanitize(s) s = tostring(s or "Game"); s = s:gsub("[^%w%s%-_]", "_"); s = s:gsub("%s+", "_"); return s end
    local function gameKey()
        local ok, info = pcall(function() return MarketplaceService:GetProductInfo(game.PlaceId) end)
        if ok and info and info.Name and #info.Name > 0 then return sanitize(info.Name) end
        return "Place_" .. tostring(game.PlaceId)
    end
    local Base = "DendriteUI"
    local Folder = Base .. "/" .. gameKey()
    function Config.Ensure() if not _isfolder(Base) then _makefolder(Base) end if not _isfolder(Folder) then _makefolder(Folder) end end
    function Config.Path(n) Config.Ensure() return Folder .. "/" .. sanitize(n) .. ".json" end
    function Config.Save(n, d) local p = Config.Path(n) local ok, j = pcall(function() return HttpService:JSONEncode(d or {}) end) if ok then _writefile(p, j) end return ok end
    function Config.Load(n) local p = Config.Path(n) if _isfile(p) then local ok, t = pcall(function() return HttpService:JSONDecode(_readfile(p)) end) if ok and type(t)=="table" then return t end end return {} end
    function Config.List() Config.Ensure() local r = {} for _, f in ipairs(_listfiles(Folder) or {}) do local n = f:match("([^/\\]+)$") or f n = n:gsub("%.json$", "") table.insert(r, n) end table.sort(r) return r end
    function Config.Delete(n) local p = Config.Path(n) if _isfile(p) then _delfile(p) end end
end
local function Signal()
    local h = {}
    return {
        Connect = function(_, fn)
            local c = {Connected = true}
            h[#h+1] = {fn = fn, c = c}
            function c:Disconnect() self.Connected = false end
            return c
        end,
        Fire = function(_, ...)
            for i=1,#h do local x=h[i]; if x.c.Connected then coroutine.wrap(x.fn)(...) end end
        end
    }
end
local Library = { _windows = {}, _controls = {}, _theme = Theme, _fonts = Fonts, _version = "3.1.0" }
-- stronger pre-destroy: remove ANY ScreenGui named DendriteUI before creating new root
do
    for _, child in ipairs(CoreGui:GetChildren()) do
        if child:IsA("ScreenGui") and child.Name == "DendriteUI" then
            pcall(function() child:Destroy() end)
        end
    end
end
local RootGui = (function()
    local g = Create("ScreenGui", {Name = "DendriteUI", ZIndexBehavior = Enum.ZIndexBehavior.Sibling, IgnoreGuiInset = true, ResetOnSpawn = false, Parent = CoreGui})
    return g
end)()
function Library:_registerControl(c) self._controls[c.id] = c end
function Library:_setValue(id, v, s) local c = self._controls[id]; if c and c.Set then c:Set(v, s) end end
function Library:_getSnapshot() local d = {} for id, c in pairs(self._controls) do if c.Get then d[id] = c:Get() end end return d end
function Library:SaveConfig(n) return Config.Save(n, self:_getSnapshot()) end
function Library:LoadConfig(n) local t = Config.Load(n) for id, v in pairs(t) do self:_setValue(id, v, true) end end
function Library:ListConfigs() return Config.List() end

function Library:CreateLibrary(opts)
    -- destroy previous instance windows if any (singleton behavior)
    if self._singletonRoot and self._singletonRoot.Parent then
        pcall(function()
            for _, child in ipairs(self._singletonRoot:GetChildren()) do child:Destroy() end
            self._singletonRoot:Destroy()
        end)
    end
    opts = opts or {}
    local title = tostring(opts.Name or "Dendrite UI")
    local titleMode = tostring(opts.TitleMode or "Static"):lower() -- static | type
    -- Removed TitleTypeConfig: using fixed tuned timings
    local autoDevice = opts.AutoDeviceCheck == true
    local forceShowMobileBtn = opts.ShowMobileButton == true -- new option: show mobile toggle even on PC
    local size = opts.Size or UDim2.fromOffset(600, 540)
    local closeCb = opts.CloseCallback
    local Window = { Name = title, _categories = {}, _selectedCategory = nil }
    local z = 100
    local rootStroke = Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.3})
    -- device adapt
    local isMobile = (UserInputService.TouchEnabled and not UserInputService.MouseEnabled) or (UserInputService.KeyboardEnabled == false)
    if isMobile and autoDevice then
        size = UDim2.fromOffset(math.clamp(size.X.Offset, 480, 560), math.clamp(size.Y.Offset, 360, 420))
    end
    local showMobileBtn = isMobile or forceShowMobileBtn
    local root = Create("Frame", {Name = "Window", Size = size, BackgroundColor3 = Theme.Panel, BorderSizePixel = 0, Position = UDim2.fromScale(0.5, 0.5), AnchorPoint = Vector2.new(0.5, 0.5), ZIndex = z, Parent = RootGui}, {rootStroke})
    self._singletonRoot = root
    -- Simplified header: clean bar + single accent line
    local header = Create("Frame", {Name = "Header", Size = UDim2.new(1, 0, 0, 42), BackgroundColor3 = Theme.Bg, BorderSizePixel = 0, ZIndex = z + 1, Parent = root}, {
        Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.25})
    })
    local accentLine = Create("Frame", {BackgroundColor3 = Theme.Accent, BorderSizePixel = 0, Size = UDim2.new(1,-20,0,1), Position = UDim2.new(0,10,1,-2), BackgroundTransparency = 0.05, Parent = header})
    local titleLabel = Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1, -160, 1, 0), Position = UDim2.fromOffset(12, 0), Text = title:upper(), TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Font = Fonts.Bold, TextSize = 16, ZIndex = z + 2, Parent = header})
    -- Title animation: only Static or looping Type
    if titleMode == "type" then
        task.spawn(function()
            local function animateText(display, text, delay)
                if not display then return end
                local animatedRandom = "1234567890"
                for i = 1, #text do
                    local revealChar = text:sub(i, i)
                    local displayText = text:sub(1, i - 1)
                    for _ = 1, math.random(1, 6) do
                        local random = math.random(1, #animatedRandom)
                        local randomChar = animatedRandom:sub(random, random)
                        display.Text = displayText .. randomChar
                        task.wait(delay)
                    end
                    display.Text = displayText .. revealChar
                    task.wait(delay)
                end
                task.wait(5)
            end
            local upper = title:upper()
            while true do
                titleLabel.Text = ""
                animateText(titleLabel, upper, 0.045)
            end
        end)
    else
        titleLabel.Text = title:upper()
    end
    local btnCluster = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.fromOffset(108, 32), Position = UDim2.new(1, -8, 0.5, 0), AnchorPoint = Vector2.new(1,0.5), Parent = header})
    local clusterLayout = Create("UIListLayout", {FillDirection = Enum.FillDirection.Horizontal, HorizontalAlignment = Enum.HorizontalAlignment.Right, VerticalAlignment = Enum.VerticalAlignment.Center, Padding = UDim.new(0,4)}) clusterLayout.Parent = btnCluster
    local function makeHeaderBtn(iconChar)
        local b = Create("TextButton", {Size = UDim2.fromOffset(32,32), BackgroundColor3 = Theme.Button, AutoButtonColor = false, Text = iconChar, Font = Fonts.Medium, TextSize = 18, TextColor3 = Theme.Text, ZIndex = z + 3, Parent = btnCluster}, {
            Create("UICorner", {CornerRadius = UDim.new(0,5)}),
            Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.3})
        })
        b.MouseEnter:Connect(function() T(b,0.12,{BackgroundColor3 = Theme.Hover}):Play() end)
        b.MouseLeave:Connect(function() T(b,0.12,{BackgroundColor3 = Theme.Button}):Play() end)
        return b
    end
    local closeBtn = makeHeaderBtn("X")
    local fsBtn = makeHeaderBtn("")
    local minBtn = makeHeaderBtn("–")
    -- reposition cluster order: minimize, fullscreen, close (already appended; adjust layout order)
    minBtn.LayoutOrder = 1 fsBtn.LayoutOrder = 2 closeBtn.LayoutOrder = 3
    -- custom fullscreen icon (aggressive corners)
    local fsIcon = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.fromOffset(16,16), AnchorPoint = Vector2.new(0.5,0.5), Position = UDim2.fromScale(0.5,0.5), Parent = fsBtn})
    local function makeCorner(ax, ay)
        local c = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.fromOffset(7,7), AnchorPoint = Vector2.new(ax,ay), Position = UDim2.new(ax, ax==1 and -1 or 1, ay, ay==1 and -1 or 1), Parent = fsIcon})
    Create("Frame", {BackgroundColor3 = Theme.Text, BorderSizePixel = 0, Size = UDim2.fromOffset(7,2), Position = UDim2.new(ax==1 and 1 or 0, ax==1 and -7 or 0, ay==1 and 1 or 0, ay==1 and -2 or 0), Parent = c})
    Create("Frame", {BackgroundColor3 = Theme.Text, BorderSizePixel = 0, Size = UDim2.fromOffset(2,7), Position = UDim2.new(ax==1 and 1 or 0, ax==1 and -2 or 0, ay==1 and 1 or 0, ay==1 and -7 or 0), Parent = c})
        return c
    end
    local fsCorners = {makeCorner(0,0), makeCorner(1,0), makeCorner(0,1), makeCorner(1,1)}
    closeBtn.MouseEnter:Connect(function() T(closeBtn, 0.12, {BackgroundColor3 = Theme.Bad}):Play() end)
    closeBtn.MouseLeave:Connect(function() T(closeBtn, 0.16, {BackgroundColor3 = Theme.Button}):Play() end)
    closeBtn.MouseButton1Click:Connect(function() root.Visible = false if type(closeCb) == "function" then pcall(closeCb) end end)
    minBtn.MouseEnter:Connect(function() T(minBtn, 0.12, {BackgroundColor3 = Theme.Hover}):Play() end)
    minBtn.MouseLeave:Connect(function() T(minBtn, 0.12, {BackgroundColor3 = Theme.Button}):Play() end)
    fsBtn.MouseEnter:Connect(function() T(fsBtn, 0.12, {BackgroundColor3 = Theme.Hover}):Play() end)
    fsBtn.MouseLeave:Connect(function() T(fsBtn, 0.12, {BackgroundColor3 = Theme.Button}):Play() end)
    local minimized, prevSize, prevPos = false, root.Size, root.Position
    local fullscreen, fsPrevSize, fsPrevPos = false, nil, nil
    minBtn.MouseButton1Click:Connect(function()
        if fullscreen then
            -- exit fullscreen first
            T(root, 0.18, {Size = fsPrevSize, Position = fsPrevPos}):Play()
            fullscreen = false
        end
        minimized = not minimized
        if minimized then
            prevSize = root.Size; prevPos = root.Position
            for _, child in ipairs(root:GetChildren()) do if child ~= header and child:IsA("GuiObject") then child.Visible = false end end
            T(root, 0.18, {Size = UDim2.new(prevSize.X.Scale, prevSize.X.Offset, 0, header.Size.Y.Offset)}):Play()
        else
            for _, child in ipairs(root:GetChildren()) do if child ~= header and child:IsA("GuiObject") then child.Visible = true end end
            T(root, 0.18, {Size = prevSize, Position = prevPos}):Play()
        end
    end)
    fsBtn.MouseButton1Click:Connect(function()
        if minimized then
            -- restore from minimized before fullscreen
            minimized = false
            for _, child in ipairs(root:GetChildren()) do if child ~= header and child:IsA("GuiObject") then child.Visible = true end end
            T(root, 0.12, {Size = prevSize, Position = prevPos}):Play()
        end
        if not fullscreen then
            fsPrevSize, fsPrevPos = root.Size, root.Position
            T(root, 0.22, {Size = UDim2.new(1, -20, 1, -20), Position = UDim2.fromScale(0.5, 0.5)}):Play()
            fullscreen = true
        else
            T(root, 0.22, {Size = fsPrevSize, Position = fsPrevPos}):Play()
            fullscreen = false
        end
    end)
    local body = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.new(1, -12, 1, -(46 + 12)), Position = UDim2.fromOffset(6, 46 + 6), ZIndex = z, Parent = root})
    local sidebar = Create("ScrollingFrame", {Name = "Sidebar", BackgroundColor3 = Theme.Panel, BorderSizePixel = 0, Size = UDim2.new(0, 100, 1, 0), ScrollBarThickness = 2, ScrollBarImageColor3 = Theme.Scrollbar, CanvasSize = UDim2.fromOffset(0,0), AutomaticCanvasSize = Enum.AutomaticSize.Y, ScrollingDirection = Enum.ScrollingDirection.Y, ZIndex = z + 1, Parent = body}, {Create("UICorner", {CornerRadius = UDim.new(0, 4)}), Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.3}), Create("UIListLayout", {Padding = UDim.new(0, 6), SortOrder = Enum.SortOrder.LayoutOrder}), Create("UIPadding", {PaddingTop = UDim.new(0, 6), PaddingLeft = UDim.new(0, 6), PaddingRight = UDim.new(0, 6), PaddingBottom = UDim.new(0, 6)})})
    local content = Create("Frame", {Name = "Content", BackgroundColor3 = Theme.Panel, BorderSizePixel = 0, ClipsDescendants = true, Size = UDim2.new(1, -(100 + 6), 1, 0), Position = UDim2.new(0, 100 + 6, 0, 0), ZIndex = z, Parent = body}, {Create("UICorner", {CornerRadius = UDim.new(0, 4)}), Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.3})})
    do
        -- Smooth, resilient dragging (supports mouse & touch) without stutter.
    local dragging = false
    local dragStart
    local frameStart
        local lastInput
        local RS = game:GetService("RunService")
        local function update()
            if not dragging or not lastInput then return end
            local curPos = (lastInput.UserInputType == Enum.UserInputType.Touch) and lastInput.Position or UserInputService:GetMouseLocation()
            local delta = curPos - dragStart
            root.Position = UDim2.new(frameStart.X.Scale, frameStart.X.Offset + delta.X, frameStart.Y.Scale, frameStart.Y.Offset + delta.Y)
        end
        header.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                lastInput = input
                dragStart = (input.UserInputType == Enum.UserInputType.Touch) and input.Position or UserInputService:GetMouseLocation()
                frameStart = root.Position
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        header.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                lastInput = input
            end
        end)
        UserInputService.InputChanged:Connect(function(input)
            if not dragging then return end
            if input == lastInput then
                update()
            end
        end)
        RS.RenderStepped:Connect(update)
        local resizingCount = 0
        local sizeLabel = Create("TextLabel", {BackgroundTransparency = 0.25, BackgroundColor3 = Theme.Bg, Size = UDim2.fromOffset(110, 20), AnchorPoint = Vector2.new(1,1), Position = UDim2.new(1, -8, 1, -8), Text = "", Font = Fonts.Medium, TextSize = 12, TextColor3 = Theme.Text, Visible = false, Parent = root}, {Create("UICorner", {CornerRadius = UDim.new(0, 4)}), Create("UIStroke", {Color = Theme.Accent, Thickness = 1, Transparency = 0.4})})
        local function resizeStartEffect()
            T(rootStroke, 0.15, {Thickness = 2, Transparency = 0.15}):Play()
        end
        local function resizeEndEffect()
            local tw = T(rootStroke, 0.18, {Thickness = 3, Transparency = 0.05})
            tw:Play()
            tw.Completed:Connect(function()
                T(rootStroke, 0.25, {Thickness = 1, Transparency = 0.3}):Play()
            end)
        end
        local function updateSizeLabel()
            local sz = root.AbsoluteSize
            sizeLabel.Text = ("%d x %d"):format(sz.X, sz.Y)
        end
        local function addCornerGrip(mode, showVisual)
            local gp = {tl = Vector2.new(0,0), tr = Vector2.new(1,0), bl = Vector2.new(0,1), br = Vector2.new(1,1)}
            local ap = gp[mode] or gp.br
            local grip = Create("Frame", {Name = "Grip_"..mode, BackgroundTransparency = 1, Size = UDim2.fromOffset(26,26), Position = UDim2.new(ap.X, ap.X==1 and 0 or 0, ap.Y, ap.Y==1 and 0 or 0), AnchorPoint = ap, ZIndex = z + 3, Parent = root})
            local hBar, vBar
            if showVisual then
                hBar = Create("Frame", {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 0.25, BorderSizePixel = 0, Size = UDim2.fromOffset(18,2), ZIndex = z + 4, Parent = grip})
                vBar = Create("Frame", {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 0.25, BorderSizePixel = 0, Size = UDim2.fromOffset(2,18), ZIndex = z + 4, Parent = grip})
                hBar.AnchorPoint = Vector2.new(1,1); hBar.Position = UDim2.new(1, -2, 1, -2)
                vBar.AnchorPoint = Vector2.new(1,1); vBar.Position = UDim2.new(1, -2, 1, -2)
                local function hover(on)
                    if on then
                        T(hBar, 0.15, {BackgroundTransparency = 0, Size = UDim2.fromOffset(24,2)}):Play()
                        T(vBar, 0.15, {BackgroundTransparency = 0, Size = UDim2.fromOffset(2,24)}):Play()
                    else
                        T(hBar, 0.15, {BackgroundTransparency = 0.25, Size = UDim2.fromOffset(18,2)}):Play()
                        T(vBar, 0.15, {BackgroundTransparency = 0.25, Size = UDim2.fromOffset(2,18)}):Play()
                    end
                end
                grip.MouseEnter:Connect(function() hover(true) end)
                grip.MouseLeave:Connect(function() hover(false) end)
            end
            local resizing = false
            local startMouse, startAbsPos, startAbsSize, parentAbs
            local minW, minH = 520, 380
            grip.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    resizing = true
                    resizingCount = resizingCount + 1
                    if resizingCount == 1 then resizeStartEffect() end
                    sizeLabel.Visible = true
                    local pos = (input.UserInputType == Enum.UserInputType.Touch) and input.Position or UserInputService:GetMouseLocation()
                    startMouse = Vector2.new(pos.X, pos.Y)
                    startAbsPos = root.AbsolutePosition
                    startAbsSize = root.AbsoluteSize
                    parentAbs = root.Parent.AbsolutePosition
                    input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then resizing = false end end)
                end
            end)
            UserInputService.InputChanged:Connect(function(input)
                if not resizing then return end
                if input.UserInputType ~= Enum.UserInputType.MouseMovement and input.UserInputType ~= Enum.UserInputType.Touch then return end
                local pos = (input.UserInputType == Enum.UserInputType.Touch) and input.Position or UserInputService:GetMouseLocation()
                local dx = pos.X - startMouse.X
                local dy = pos.Y - startMouse.Y
                local left, top = startAbsPos.X, startAbsPos.Y
                local right, bottom = startAbsPos.X + startAbsSize.X, startAbsPos.Y + startAbsSize.Y
                if mode == "br" then right = right + dx bottom = bottom + dy end
                if mode == "bl" then left = left + dx bottom = bottom + dy end
                if mode == "tr" then right = right + dx top = top + dy end
                if mode == "tl" then left = left + dx top = top + dy end
                local newW = math.max(minW, right - left)
                local newH = math.max(minH, bottom - top)
                -- recompute left/top if min constraints clipped
                if mode == "bl" then left = right - newW end
                if mode == "tr" then top = bottom - newH end
                if mode == "tl" then left = right - newW top = bottom - newH end
                local centerX = left + newW/2
                local centerY = top + newH/2
                root.Size = UDim2.fromOffset(newW, newH)
                root.Position = UDim2.fromOffset(centerX - parentAbs.X, centerY - parentAbs.Y)
                updateSizeLabel()
            end)
            grip.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    if resizing then
                        resizing = false
                        resizingCount = math.max(0, resizingCount - 1)
                        if resizingCount == 0 then
                            resizeEndEffect()
                            task.delay(0.6, function() if resizingCount == 0 then sizeLabel.Visible = false end end)
                        end
                    end
                end
            end)
        end
        addCornerGrip("br", true)
        addCornerGrip("bl", false)
        addCornerGrip("tr", false)
        addCornerGrip("tl", false)
    end
    function Window:AddCategory(o)
        o = o or {}
        local name = tostring(o.Name or "Category")
        local icon = o.Icon
        local Category = { Name = name, _pages = {}, _selectedPage = nil }
        local btn = Create("TextButton", {BackgroundTransparency = 1, AutoButtonColor = false, Text = "", Size = UDim2.new(1, 0, 0, 38), ZIndex = z + 2, Parent = sidebar})
        local inner = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.new(1, -2, 1, -2), Position = UDim2.fromOffset(1,1), Parent = btn})
        local iconImg
        -- unified layout: reserve 18px slot at left; text always starts after it
        if icon then
            if type(icon) == "number" or tostring(icon):match("^%d+$") then icon = "rbxassetid://" .. tostring(icon) end
            iconImg = Create("ImageLabel", {BackgroundTransparency = 1, Size = UDim2.fromOffset(16,16), Position = UDim2.fromOffset(4, 11), Image = icon, ImageColor3 = Theme.SubText, ZIndex = z + 3, Parent = inner})
        end
        local lbl = Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1, -10, 1, 0), Position = UDim2.fromOffset( (icon and 24) or 24, 0), Text = name, Font = Fonts.Medium, TextSize = 14, TextColor3 = Theme.SubText, TextXAlignment = Enum.TextXAlignment.Left, ZIndex = z + 3, Parent = inner})
        local catInd = Create("Frame", {BackgroundColor3 = Theme.Accent, BorderSizePixel = 0, Size = UDim2.new(0,0,0,2), AnchorPoint = Vector2.new(0,1), Position = UDim2.new(0,0,1,0), Visible = false, ZIndex = z + 3, Parent = inner})
        btn.MouseEnter:Connect(function() if Window._selectedCategory ~= Category then T(lbl, 0.12, {TextColor3 = Theme.Text}):Play() if iconImg then T(iconImg, 0.12, {ImageColor3 = Theme.Text}):Play() end end end)
        btn.MouseLeave:Connect(function() if Window._selectedCategory ~= Category then T(lbl, 0.12, {TextColor3 = Theme.SubText}):Play() if iconImg then T(iconImg, 0.12, {ImageColor3 = Theme.SubText}):Play() end end end)
        local catContainer = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.fromScale(1,1), Visible = false, Parent = content})
    local subBar = Create("ScrollingFrame", {BackgroundTransparency = 1, BorderSizePixel = 0, Size = UDim2.new(1, -10, 0, 24), Position = UDim2.fromOffset(5, 5), ScrollBarThickness = 2, ScrollBarImageColor3 = Theme.Scrollbar, CanvasSize = UDim2.fromOffset(0,0), AutomaticCanvasSize = Enum.AutomaticSize.X, ScrollingDirection = Enum.ScrollingDirection.X, ZIndex = z + 1, Parent = catContainer}, {Create("UIListLayout", {FillDirection = Enum.FillDirection.Horizontal, Padding = UDim.new(0, 8), VerticalAlignment = Enum.VerticalAlignment.Center, HorizontalAlignment = Enum.HorizontalAlignment.Left})})
    local pageArea = Create("Frame", {BackgroundTransparency = 1, ClipsDescendants = true, Size = UDim2.new(1, -10, 1, -(24 + 10 + 6)), Position = UDim2.fromOffset(5, 24 + 9), Parent = catContainer})
        function Category:Select()
            if Window._selectedCategory and Window._selectedCategory._label then
                T(Window._selectedCategory._label, 0.12, {TextColor3 = Theme.SubText}):Play()
                if Window._selectedCategory._indicator then Window._selectedCategory._indicator.Visible = false Window._selectedCategory._indicator.Size = UDim2.fromOffset(0,2) end
                if Window._selectedCategory._icon then T(Window._selectedCategory._icon, 0.12, {ImageColor3 = Theme.SubText}):Play() end
            end
            Window._selectedCategory = Category
            for _, f in ipairs(content:GetChildren()) do if f:IsA("Frame") then f.Visible = false end end
            catContainer.Visible = true
            T(lbl, 0.12, {TextColor3 = Theme.Text}):Play()
            if iconImg then T(iconImg, 0.12, {ImageColor3 = Theme.Text}):Play() end
            catInd.Visible = true
            -- underline now expands full inner width (minus padding) for aggressive look
            T(catInd, 0.2, {Size = UDim2.new(1, -8, 0, 2), Position = UDim2.new(0,4,1,0)}):Play()
            if not Category._selectedPage and #Category._pages > 0 then Category._pages[1]:Select() end
        end
        btn.MouseButton1Click:Connect(function() Category:Select() end)
        function Category:AddPage(p)
            p = p or {}
            local pname = tostring(p.Name or "Page")
            local Page = { Name = pname, _blocks = {}, _columns = Clamp(tonumber(p.Columns) or 2, 1, 3) }
            local tb = TextService:GetTextSize(pname, 13, Fonts.Medium, Vector2.new(1000, 22))
            local subBtn = Create("TextButton", {BackgroundTransparency = 1, AutoButtonColor = false, Text = pname, TextColor3 = Theme.SubText, Font = Fonts.Medium, TextSize = 13, Size = UDim2.fromOffset(tb.X + 18, 22), ZIndex = z + 2, Parent = subBar})
            local subInd = Create("Frame", {BackgroundColor3 = Theme.Accent, BorderSizePixel = 0, Size = UDim2.new(0,0,0,2), AnchorPoint = Vector2.new(0,1), Position = UDim2.new(0,4,1,0), Visible = false, ZIndex = z + 3, Parent = subBtn})
            subBtn.MouseEnter:Connect(function() if Category._selectedPage ~= Page then T(subBtn, 0.12, {TextColor3 = Theme.Text}):Play() end end)
            subBtn.MouseLeave:Connect(function() if Category._selectedPage ~= Page then T(subBtn, 0.12, {TextColor3 = Theme.SubText}):Play() end end)
            local pageFrame = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.fromScale(1,1), Visible = false, Parent = pageArea})
            local cols = {}
            do
            local pad = 4
                local cw = 1 / Page._columns
                for i=1, Page._columns do
                local col = Create("ScrollingFrame", {BackgroundTransparency = 1, ClipsDescendants = true, Size = UDim2.new(cw, -(pad * (Page._columns + 1)) / Page._columns, 1, -2), Position = UDim2.new((i-1)*cw, pad * i - (pad / Page._columns), 0, 1), ScrollBarThickness = 2, ScrollBarImageColor3 = Theme.Scrollbar, CanvasSize = UDim2.fromOffset(0,0), AutomaticCanvasSize = Enum.AutomaticSize.Y, ScrollingDirection = Enum.ScrollingDirection.Y, Parent = pageFrame}, {Create("UIListLayout", {Padding = UDim.new(0, 3), HorizontalAlignment = Enum.HorizontalAlignment.Center, SortOrder = Enum.SortOrder.LayoutOrder}), Create("UIPadding", {PaddingLeft = UDim.new(0,2), PaddingRight = UDim.new(0,2), PaddingTop = UDim.new(0,2), PaddingBottom = UDim.new(0,3)})})
                    cols[i] = col
                end
            end
            function Page:Select()
                for _, pfr in ipairs(pageArea:GetChildren()) do if pfr:IsA("Frame") then pfr.Visible = false end end
                pageFrame.Visible = true
                Category._selectedPage = Page
                for _, b in ipairs(subBar:GetChildren()) do
                    if b:IsA("TextButton") then
                        T(b, 0.12, {TextColor3 = Theme.SubText}):Play()
                        local u = b:FindFirstChildOfClass("Frame") if u then u.Visible = false u.Size = UDim2.fromOffset(0,2) end
                    end
                end
                T(subBtn, 0.12, {TextColor3 = Theme.Text}):Play()
                subInd.Visible = true
                T(subInd, 0.2, {Size = UDim2.new(1, -8, 0, 2), Position = UDim2.new(0,4,1,0)}):Play()
            end
            subBtn.MouseButton1Click:Connect(function() Page:Select() end)
            function Page:AddBlock(g)
                g = g or {}
                local gName = tostring(g.Name or "Block")
                local desc = g.Description
                local side = Clamp(tonumber(g.Side) or 1, 1, Page._columns)
                local Group = { Name = gName, _controls = {} }
                local gFrame = Create("Frame", {BackgroundColor3 = Theme.Bg, ClipsDescendants = true, Size = UDim2.new(1, -4, 0, 58), AutomaticSize = Enum.AutomaticSize.Y, BorderSizePixel = 0, ZIndex = z + 1, Parent = cols[side]}, {
                    Create("UICorner", {CornerRadius = UDim.new(0, 4)}),
                    Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.3}),
                    Create("UIPadding", {PaddingLeft = UDim.new(0,6), PaddingRight = UDim.new(0,6), PaddingTop = UDim.new(0,6), PaddingBottom = UDim.new(0,6)})
                })
                Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1, 0, 0, 18), Text = gName, Font = Fonts.Bold, TextSize = 14, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, ZIndex = z + 2, Parent = gFrame})
                local y = 22
                if desc and #desc > 0 then
                    -- Larger visible info badge with plain 'i'
                    local infoBtn = Create("TextButton", {BackgroundColor3 = Color3.fromRGB(40,42,41), Size = UDim2.fromOffset(20,20), Position = UDim2.fromOffset(gFrame.AbsoluteSize.X - 8,0), AnchorPoint = Vector2.new(1,0), Text = "i", TextColor3 = Theme.SubText, Font = Fonts.Bold, TextSize = 14, AutoButtonColor = false, ZIndex = z + 5, Parent = gFrame})
                    Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = infoBtn})
                    local iStroke = Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.55, Parent = infoBtn})
                    infoBtn.MouseEnter:Connect(function()
                        T(infoBtn,0.15,{BackgroundColor3 = Color3.fromRGB(48,52,50)}):Play()
                        T(iStroke,0.15,{Transparency = 0.35}):Play()
                    end)
                    infoBtn.MouseLeave:Connect(function()
                        if not popup or not popup.Visible then
                            T(infoBtn,0.18,{BackgroundColor3 = Color3.fromRGB(36,38,37)}):Play()
                            T(iStroke,0.18,{Transparency = 0.55}):Play()
                        end
                    end)
                    -- adjust when size changes (since AbsoluteSize not ready on creation) using a heartbeat
                    task.spawn(function()
                        local rs = game:GetService("RunService")
                        for _=1,10 do
                            if not infoBtn.Parent then return end
                            infoBtn.Position = UDim2.fromOffset(gFrame.AbsoluteSize.X - 8,0)
                            rs.Heartbeat:Wait()
                        end
                        gFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
                            infoBtn.Position = UDim2.fromOffset(gFrame.AbsoluteSize.X - 8,0)
                        end)
                    end)
                    -- measure text for better width
                    local meas = TextService:GetTextSize(desc, 12, Fonts.Regular, Vector2.new(320, math.huge))
                    local baseW = math.clamp(meas.X + 30, 140, 340)
                    local popup = Create("Frame", {BackgroundColor3 = Color3.fromRGB(28,30,29), BorderSizePixel = 0, Visible = false, Size = UDim2.new(0, baseW, 0, 0), ZIndex = z + 500, Parent = gFrame}, {
                        Create("UICorner", {CornerRadius = UDim.new(0,100)}),
                        Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.4}),
                        Create("UIPadding", {PaddingLeft = UDim.new(0,10), PaddingRight = UDim.new(0,10), PaddingTop = UDim.new(0,6), PaddingBottom = UDim.new(0,6)})
                    })
                    local pText = Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1,0,0,0), TextWrapped = true, TextYAlignment = Enum.TextYAlignment.Top, Text = desc, Font = Fonts.Regular, TextSize = 12, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, ZIndex = z + 501, Parent = popup})
                    pText.AutomaticSize = Enum.AutomaticSize.Y
                    popup.AutomaticSize = Enum.AutomaticSize.Y
                    popup.ClipsDescendants = true
                    -- arrow (triangle) using rotated square trick
                    -- arrow removed for minimalist pill popup
                    -- layout popup on show
                    local function positionPopup()
                        local relX = infoBtn.AbsolutePosition.X - gFrame.AbsolutePosition.X
                        local desired = relX - popup.AbsoluteSize.X/2 + infoBtn.AbsoluteSize.X/2
                        desired = math.clamp(desired, 4, math.max(4, gFrame.AbsoluteSize.X - popup.AbsoluteSize.X - 4))
                        popup.Position = UDim2.fromOffset(desired, 20)
                    end
                    local showing = false
                    local function show()
                        if showing then return end
                        showing = true
                        popup.Visible = true
                        popup.Size = UDim2.new(0, baseW, 0, 0)
                        positionPopup()
                        T(popup,0.18,{Size = UDim2.new(0,baseW,0,pText.AbsoluteSize.Y + 12)}):Play()
                        T(infoBtn,0.15,{BackgroundColor3 = Color3.fromRGB(48,52,50)}):Play()
                        T(iStroke,0.15,{Transparency = 0.35}):Play()
                    end
                    local function hide()
                        if not showing then return end
                        showing = false
                        local tw = T(popup,0.15,{Size = UDim2.new(0,baseW,0,0)})
                        tw:Play()
                        tw.Completed:Connect(function()
                            if not showing then
                                popup.Visible = false
                                T(infoBtn,0.18,{BackgroundColor3 = Color3.fromRGB(36,38,37)}):Play()
                                T(iStroke,0.18,{Transparency = 0.55}):Play()
                            end
                        end)
                    end
                    infoBtn.MouseEnter:Connect(show)
                    infoBtn.MouseLeave:Connect(function()
                        -- hide only if cursor not over popup
                        local con; con = game:GetService("RunService").RenderStepped:Connect(function()
                            local pos = UserInputService:GetMouseLocation()
                            local abs = popup.AbsolutePosition
                            local sz = popup.AbsoluteSize
                            local inside = pos.X >= abs.X and pos.X <= abs.X+sz.X and pos.Y >= abs.Y and pos.Y <= abs.Y+sz.Y
                            local btnAbs = infoBtn.AbsolutePosition
                            local btnSz = infoBtn.AbsoluteSize
                            local insideBtn = pos.X >= btnAbs.X and pos.X <= btnAbs.X+btnSz.X and pos.Y >= btnAbs.Y and pos.Y <= btnAbs.Y+btnSz.Y
                            if not inside and not insideBtn then
                                hide(); con:Disconnect()
                            end
                        end)
                    end)
                    infoBtn.MouseButton1Click:Connect(function()
                        if showing then hide() else show() end
                    end)
                    y = y + 0 -- no vertical space consumed now
                end
                local function nextY(h) local o=y; y=y+h+6; return o end
                -- Toggle
                function Group:AddToggle(o)
                    o = o or {}
                    local label = tostring(o.Name or "Toggle")
                    local default = (o.Default == true)
                    local cb = o.Callback
                    local id = o.Flag and tostring(o.Flag) or ("%s/%s/%s/%s/%s"):format(Window.Name, Category.Name, Page.Name, Group.Name, label)
                    local row = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.new(1,-2,0,32), Position = UDim2.fromOffset(0,nextY(32)), Parent = gFrame})
                    local container = Create("TextButton", {BackgroundTransparency = 1, AutoButtonColor = false, Text = "", Size = UDim2.new(1,0,1,0), Parent = row})
                    local labelWidth = 0.44
                    Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(labelWidth,-6,1,0), Text = label, Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = container})
                    local shell = Create("Frame", {BackgroundColor3 = Color3.fromRGB(50,50,50), Size = UDim2.fromOffset(40,18), AnchorPoint = Vector2.new(1,0.5), Position = UDim2.new(1,-4,0.5,0), Parent = container})
                    Create("UICorner", {CornerRadius = UDim.new(0,4), Parent = shell})
                    local recess = Create("Frame", {BackgroundColor3 = Theme.Bg, Size = UDim2.fromOffset(36,14), Position = UDim2.fromOffset(2,2), Parent = shell})
                    Create("UICorner", {CornerRadius = UDim.new(0,4), Parent = recess})
                    local accentFill = Create("Frame", {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 1, Size = UDim2.fromScale(1,1), Parent = shell})
                    Create("UICorner", {CornerRadius = UDim.new(0,4), Parent = accentFill})
                    local knob = Create("Frame", {BackgroundColor3 = Theme.Scrollbar, Size = UDim2.fromOffset(12,12), Position = UDim2.new(0,4,0.5,0), AnchorPoint = Vector2.new(0,0.5), Parent = shell})
                    Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = knob})
                    local Toggle = { id = id, _value = default, _signal = Signal() }
                    function Toggle:Get() return self._value end
                    function Toggle:Set(v, silent)
                        v = (v == true)
                        self._value = v
                        if v then
                            T(accentFill,0.25,{BackgroundTransparency = 0}):Play()
                            T(knob,0.25,{Position = UDim2.new(1,-16,0.5,0), BackgroundColor3 = Theme.Text}):Play()
                        else
                            T(accentFill,0.25,{BackgroundTransparency = 1}):Play()
                            T(knob,0.25,{Position = UDim2.new(0,4,0.5,0), BackgroundColor3 = Theme.Scrollbar}):Play()
                        end
                        if not silent then if type(cb)=="function" then pcall(cb,v) end Toggle._signal:Fire(v) end
                    end
                    function Toggle:OnChanged(fn) return self._signal:Connect(fn) end
                    container.MouseButton1Click:Connect(function() Toggle:Set(not Toggle._value) end)
                    container.MouseEnter:Connect(function() T(shell,0.15,{BackgroundColor3 = Color3.fromRGB(58,58,58)}):Play() end)
                    container.MouseLeave:Connect(function() T(shell,0.15,{BackgroundColor3 = Color3.fromRGB(50,50,50)}):Play() end)
                    Toggle:Set(default,true)
                    Library:_registerControl(Toggle)
                    table.insert(Group._controls, Toggle)
                    return Toggle
                end
                -- Button
                function Group:AddButton(o)
                    o = o or {}
                    local label = tostring(o.Name or "Button")
                    local cb = o.Callback
                    local compact = o.Compact == true
                    local h = compact and 28 or 32
                    local row = Create("TextButton", {BackgroundColor3 = Theme.Button, AutoButtonColor = false, Size = UDim2.new(1,0,0,h), Position = UDim2.fromOffset(0,nextY(h)), Text = "", Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.Text, Parent = gFrame}, {
                        Create("UICorner", {CornerRadius = UDim.new(0,4)}),
                        Create("UIStroke", {Name = "Stroke", Color = Theme.Stroke, Thickness = 1, Transparency = 0.45}),
                        Create("UIPadding", {PaddingLeft = UDim.new(0,10), PaddingRight = UDim.new(0,10)})
                    })
                    Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1,0,1,0), Text = label, Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = row})
                    local bar = Create("Frame", {BackgroundColor3 = Theme.Accent, BorderSizePixel = 0, Size = UDim2.new(0,0,0,2), AnchorPoint = Vector2.new(0,1), Position = UDim2.new(0,0,1,0), BackgroundTransparency = 0.15, Parent = row})
                    local function hover(on)
                        if on then
                            T(row,0.11,{BackgroundColor3 = Theme.Hover}):Play()
                            T(row.Stroke,0.14,{Transparency = 0.25}):Play()
                        else
                            T(row,0.11,{BackgroundColor3 = Theme.Button}):Play()
                            T(row.Stroke,0.14,{Transparency = 0.45}):Play()
                        end
                    end
                    row.MouseEnter:Connect(function() hover(true) end)
                    row.MouseLeave:Connect(function() hover(false) end)
                    row.MouseButton1Click:Connect(function()
                        if type(cb)=="function" then pcall(cb) end
                        -- animate bar across then retract & hide
                        bar.BackgroundTransparency = 0.15
                        bar.Size = UDim2.new(0,0,0,2)
                        local tween1 = T(bar,0.18,{Size = UDim2.new(1,0,0,2)})
                        tween1:Play()
                        tween1.Completed:Connect(function()
                            local tween2 = T(bar,0.18,{Size = UDim2.new(0,0,0,2)})
                            tween2:Play()
                            tween2.Completed:Connect(function()
                                bar.BackgroundTransparency = 1
                            end)
                        end)
                    end)
                    local Button = { id = ("%s/%s/%s/%s/%s"):format(Window.Name, Category.Name, Page.Name, Group.Name, label) }
                    Library:_registerControl(Button)
                    table.insert(Group._controls, Button)
                    return Button
                end
                -- Slider
                function Group:AddSlider(o)
                    o = o or {}
                    local label = tostring(o.Name or "Slider")
                    local min = tonumber(o.Min) or 0
                    local max = tonumber(o.Max) or 100
                    if max == min then max = min + 1 end
                    local default = tonumber(o.Default or min)
                    local step = tonumber(o.Step or 1)
                    local cb = o.Callback
                    local precise = o.Precise == true
                    local id = o.Flag and tostring(o.Flag) or ("%s/%s/%s/%s/%s"):format(Window.Name, Category.Name, Page.Name, Group.Name, label)
                    -- UI row (compressed height)
                    local rowHeight = 46
                    local row = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.new(1,-2,0,rowHeight), Position = UDim2.fromOffset(0,nextY(rowHeight)), Parent = gFrame})
                    -- Label anchored top-left
                    local labelText = Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1, -80, 0, 18), Position = UDim2.new(0,0,0,0), Text = label, Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = row})
                    -- Value box floats to right of label
                    local valueBox = Create("TextBox", {BackgroundColor3 = Theme.Button, Text = tostring(default), Font = Fonts.Medium, TextSize = 12, TextColor3 = Theme.SubText, Size = UDim2.new(0,64,0,18), Position = UDim2.new(1,-66,0,0), AnchorPoint = Vector2.new(0,0), ClearTextOnFocus = false, TextXAlignment = Enum.TextXAlignment.Center, Parent = row})
                    Create("UICorner", {CornerRadius = UDim.new(0,4), Parent = valueBox})
                    local vbStroke = Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.45, Parent = valueBox})
                    -- Bar spans almost entire width beneath
                    local bar = Create("Frame", {BackgroundColor3 = Color3.fromRGB(30,32,31), Size = UDim2.new(1,0,0,6), Position = UDim2.new(0,0,0,26), Parent = row}, {Create("UICorner", {CornerRadius = UDim.new(1,0)})})
                    local barStroke = Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.6, Parent = bar})
                    -- drag pulse effect frame (overlay)
                    local dragPulse = Create("Frame", {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 1, Size = UDim2.new(1,0,1,0), Parent = bar})
                    Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = dragPulse})
                    dragPulse.ZIndex = bar.ZIndex + 1
                    local fill = Create("Frame", {BackgroundColor3 = Theme.Accent, Size = UDim2.new(0,0,1,0), Parent = bar}, {Create("UICorner", {CornerRadius = UDim.new(1,0)})})
                    local gradient = Instance.new("UIGradient")
                    gradient.Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Theme.Accent),
                        ColorSequenceKeypoint.new(0.5, Theme.Accent2),
                        ColorSequenceKeypoint.new(1, Theme.Accent)
                    })
                    gradient.Rotation = 0
                    gradient.Parent = fill
                    -- animate gradient shift
                    task.spawn(function()
                        local t0 = tick()
                        while row.Parent do
                            local tNow = (tick() - t0) * 25
                            gradient.Offset = Vector2.new((tNow % 100)/100, 0)
                            task.wait(0.05)
                        end
                    end)
                    local knob = Create("Frame", {BackgroundColor3 = Theme.Text, Size = UDim2.fromOffset(14,14), AnchorPoint = Vector2.new(0.5,0.5), Position = UDim2.new(0,0,0.5,0), Parent = bar}, {Create("UICorner", {CornerRadius = UDim.new(1,0)})})
                    local knobStroke = Create("UIStroke", {Color = Theme.Bg, Thickness = 2, Transparency = 0.2, Parent = knob})
                    local knobGlow = Create("ImageLabel", {BackgroundTransparency = 1, Image = "rbxassetid://4996891970", ImageColor3 = Theme.Accent, ImageTransparency = 0.9, Size = UDim2.fromOffset(28,28), AnchorPoint = Vector2.new(0.5,0.5), Position = UDim2.new(0.5,0,0.5,0), Parent = knob})
                    -- sheen effect
                    local sheen = Create("Frame", {BackgroundColor3 = Color3.fromRGB(255,255,255), BackgroundTransparency = 0.85, Size = UDim2.new(0,0,1,0), Parent = fill})
                    Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = sheen})
                    -- tooltip
                    knobGlow.ZIndex = 9 knob.ZIndex = 9
                    -- min/max subtle labels
                    -- removed min/max labels per request
                    -- Hover effects
                    local function hover(on)
                        if on then
                            T(bar,0.16,{BackgroundColor3 = Color3.fromRGB(36,40,38)}):Play()
                            T(barStroke,0.18,{Transparency = 0.35}):Play()
                            T(knobGlow,0.2,{ImageTransparency = 0.75}):Play()
                            T(knob,0.18,{Size = UDim2.fromOffset(18,18)}):Play()
                        else
                            T(bar,0.20,{BackgroundColor3 = Color3.fromRGB(30,32,31)}):Play()
                            T(barStroke,0.20,{Transparency = 0.6}):Play()
                            T(knobGlow,0.25,{ImageTransparency = 0.9}):Play()
                            T(knob,0.20,{Size = UDim2.fromOffset(14,14)}):Play()
                        end
                    end
                    bar.MouseEnter:Connect(function() hover(true) end)
                    bar.MouseLeave:Connect(function() hover(false) end)
                    knob.MouseEnter:Connect(function() hover(true) end)
                    -- early declare interaction state so hover callbacks capture them
                    local dragging, fine, lastClick = false, false, 0
                    knob.MouseLeave:Connect(function() if not dragging then hover(false) end end)
                    valueBox.Focused:Connect(function() T(vbStroke,0.15,{Transparency = 0.25}):Play() end)
                    valueBox.FocusLost:Connect(function() T(vbStroke,0.18,{Transparency = 0.45}):Play() end)
                    local Slider = { id = id, _value = default }
                    function Slider:Get() return self._value end
                    local function formatValue(v)
                        if precise then
                            return tostring(string.format("%.3f", v)):gsub("0+$","%%"):gsub("%.%%$",".")
                        else
                            return tostring(v)
                        end
                    end
                    function Slider:Set(v, silent)
                        if precise then
                            local scaledStep = step
                            if scaledStep < 0.0001 then scaledStep = 0.0001 end
                            v = Clamp(v, min, max)
                        else
                            v = Clamp(Round(v, step), min, max)
                        end
                        self._value = v
                        local pct = (v - min) / (max - min)
                        fill.Size = UDim2.new(pct,0,1,0)
                        knob.Position = UDim2.new(pct,0,0.5,0)
                        valueBox.Text = formatValue(v)
                        if not silent and type(cb)=="function" then pcall(cb,v) end
                    end
                    -- dragging / fine control logic
                    local dragging = false
                    local fine = false -- ctrl-held fine adjustment
                    -- double click reset support
                    local lastClick = 0
                    local function updateFromX(x)
                        local rel = (x - bar.AbsolutePosition.X)/math.max(1, bar.AbsoluteSize.X)
                        rel = math.clamp(rel,0,1)
                        local raw = min + rel * (max - min)
                        if not precise then
                            Slider:Set(raw)
                        else
                            Slider:Set(raw)
                        end
                    end
                    local function beginDrag(input)
                        dragging = true
                        -- start pulse
                        dragPulse.BackgroundTransparency = 0.9
                        dragPulse.Size = UDim2.new(1,0,1,0)
                        T(dragPulse,0.25,{BackgroundTransparency = 1}):Play()
                        local x = (input.UserInputType==Enum.UserInputType.Touch) and input.Position.X or UserInputService:GetMouseLocation().X
                        updateFromX(x)
                    end
                    bar.InputBegan:Connect(function(input)
                        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                            local now = tick()
                            if now - lastClick < 0.35 then
                                -- double click -> reset to default
                                Slider:Set(default)
                            else
                                beginDrag(input)
                            end
                            lastClick = now
                        end
                    end)
                    knob.InputBegan:Connect(function(input)
                        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                            beginDrag(input)
                        end
                    end)
                    UserInputService.InputChanged:Connect(function(input)
                        if dragging and (input.UserInputType==Enum.UserInputType.MouseMovement or input.UserInputType==Enum.UserInputType.Touch) then
                            local x = (input.UserInputType==Enum.UserInputType.Touch) and input.Position.X or UserInputService:GetMouseLocation().X
                            if fine then
                                -- apply smaller incremental move by biasing x slightly toward previous value position
                                updateFromX(x)
                            else
                                updateFromX(x)
                            end
                        end
                    end)
                    UserInputService.InputEnded:Connect(function(input)
                        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                            if dragging then
                                -- end pulse
                                T(dragPulse,0.18,{BackgroundTransparency = 1}):Play()
                            end
                            dragging=false
                        end
                    end)
                    UserInputService.InputBegan:Connect(function(input)
                        if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then fine = true end
                        if input.KeyCode == Enum.KeyCode.Left or input.KeyCode == Enum.KeyCode.A then
                            if fine then Slider:Set(Slider._value - (precise and (step*0.25) or step)) else Slider:Set(Slider._value - step) end
                        elseif input.KeyCode == Enum.KeyCode.Right or input.KeyCode == Enum.KeyCode.D then
                            if fine then Slider:Set(Slider._value + (precise and (step*0.25) or step)) else Slider:Set(Slider._value + step) end
                        end
                    end)
                    UserInputService.InputEnded:Connect(function(input)
                        if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then fine = false end
                    end)
                    -- valueBox editing
                    valueBox.Focused:Connect(function()
                        valueBox.TextColor3 = Theme.Text
                    end)
                    valueBox.FocusLost:Connect(function(enter)
                        valueBox.TextColor3 = Theme.SubText
                        local num = tonumber(valueBox.Text)
                        if num then
                            Slider:Set(num)
                        else
                            valueBox.Text = formatValue(Slider._value)
                        end
                    end)
                    valueBox:GetPropertyChangedSignal("Text"):Connect(function()
                        if precise then return end
                        -- limit to numeric characters when not precise; allow minus
                        local filtered = valueBox.Text:gsub("[^%d%-]","")
                        if filtered ~= valueBox.Text then valueBox.Text = filtered end
                    end)
                    -- init
                    Slider:Set(default,true)
                    -- continuous sheen sweep loop
                    task.spawn(function()
                        while row.Parent do
                            sheen.Size = UDim2.new(0,0,1,0)
                            sheen.BackgroundTransparency = 0.9
                            T(sheen,1.2,{Size = UDim2.new(1,0,1,0), BackgroundTransparency = 1}):Play()
                            task.wait(3.5)
                        end
                    end)
                    Library:_registerControl(Slider)
                    table.insert(Group._controls, Slider)
                    return Slider
                end
                -- NewSlider(text, low, high, precise, callback, defaultValue, flag)
                function Group:NewSlider(text, low, high, precise, callback, defaultValue, flag)
                    return Group:AddSlider({
                        Name = text,
                        Min = low,
                        Max = high,
                        Precise = precise,
                        Callback = callback,
                        Default = defaultValue,
                        Flag = flag,
                        Step = precise and ( (high - low) / 300 ) or 1,
                    })
                end
                -- Dropdown
                function Group:AddDropdown(o)
                    o = o or {}
                    local label = tostring(o.Name or "Dropdown")
                    local list = o.Options or {}
                    local default = o.Default
                    local cb = o.Callback
                    local id = o.Flag and tostring(o.Flag) or ("%s/%s/%s/%s/%s"):format(Window.Name, Category.Name, Page.Name, Group.Name, label)
                    local row = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.new(1,-2,0,30), Position = UDim2.fromOffset(0,nextY(30)), Parent = gFrame})
                    local labelWidth = 0.44
                    Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(labelWidth,-6,1,0), Text = label, Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = row})
                    local box = Create("TextButton", {BackgroundColor3 = Theme.Button, AutoButtonColor = false, Size = UDim2.new(1-labelWidth,-4,1,0), Position = UDim2.new(labelWidth,4,0,0), Text = "", Parent = row}, {Create("UICorner", {CornerRadius = UDim.new(0,4)}), Create("UIStroke", {Name="Stroke", Color = Theme.Stroke, Thickness = 1, Transparency = 0.3})})
                    local valueLbl = Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1,-26,1,0), Position = UDim2.fromOffset(8,0), Text = default and tostring(default) or "Select...", Font = Fonts.Medium, TextSize = 13, TextXAlignment = Enum.TextXAlignment.Left, TextColor3 = Theme.SubText, Parent = box})
                    local arrow = Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.fromOffset(16,16), Position = UDim2.new(1,-12,0.5,0), AnchorPoint = Vector2.new(0.5,0.5), Text = "▶", Font = Fonts.Medium, TextSize = 14, TextColor3 = Theme.Text, Rotation = 90, Parent = box})
                    local listFrame = Create("Frame", {BackgroundColor3 = Theme.Bg, BorderSizePixel = 0, Visible = false, ZIndex = (z+200), Parent = RootGui}, {Create("UICorner", {CornerRadius = UDim.new(0,4)}), Create("UIStroke", {Name="Stroke", Color = Theme.Stroke, Thickness = 1, Transparency = 0.3})})
                    local listScroll = Create("ScrollingFrame", {BackgroundTransparency = 1, BorderSizePixel = 0, Size = UDim2.new(1,-8,1,-8), Position = UDim2.fromOffset(4,4), CanvasSize = UDim2.fromOffset(0,0), AutomaticCanvasSize = Enum.AutomaticSize.Y, ScrollingDirection = Enum.ScrollingDirection.Y, ScrollBarThickness = 2, ScrollBarImageColor3 = Theme.Scrollbar, ZIndex = (z+201), Parent = listFrame}, {Create("UIListLayout", {Padding = UDim.new(0,4), SortOrder = Enum.SortOrder.LayoutOrder})})
                    local function updateListGeometry(count)
                        local w = math.max(170, box.AbsoluteSize.X)
                        local h = math.min(180, (count * 28) + 10)
                        listFrame.Size = UDim2.fromOffset(w, 0)
                        listFrame.Position = UDim2.fromOffset(box.AbsolutePosition.X, box.AbsolutePosition.Y + box.AbsoluteSize.Y + 4)
                        -- animate expand
                        local targetH = h
                        listFrame.Visible = true
                        listFrame.Size = UDim2.fromOffset(w, 4)
                        T(listFrame,0.18,{Size = UDim2.fromOffset(w,targetH)}):Play()
                    end
                    local Dropdown = { id = id, _value = default, _options = {} }
                    function Dropdown:Get() return self._value end
                    function Dropdown:Set(v, silent)
                        if v == nil then self._value=nil valueLbl.Text="Select..." valueLbl.TextColor3 = Theme.SubText return end
                        if not self._options or not table.find(self._options, v) then return end
                        self._value = v
                        valueLbl.Text = tostring(v)
                        valueLbl.TextColor3 = Theme.Text
                        if not silent and type(cb)=="function" then pcall(cb,v) end
                    end
                    function Dropdown:SetOptions(nl)
                        self._options = {}
                        for _, c in ipairs(listScroll:GetChildren()) do if c:IsA("TextButton") then c:Destroy() end end
                        for _, val in ipairs(nl or {}) do
                            table.insert(self._options, val)
                            local item = Create("TextButton", {BackgroundColor3 = Theme.Button, AutoButtonColor = false, Size = UDim2.new(1,0,0,26), Text = "", Parent = listScroll, ZIndex = (z+202)}, {Create("UICorner", {CornerRadius = UDim.new(0,4)}), Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.6})})
                            local l = Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(1,-12,1,0), Position = UDim2.fromOffset(8,0), Text = tostring(val), Font = Fonts.Medium, TextSize = 12, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = item})
                            local accent = Create("Frame", {BackgroundColor3 = Theme.Accent, BackgroundTransparency = 1, BorderSizePixel = 0, Size = UDim2.new(0,2,1,0), Parent = item})
                            item.MouseEnter:Connect(function() T(item,0.12,{BackgroundColor3 = Theme.Hover}):Play() T(item.UIStroke,0.12,{Transparency = 0.3}):Play() end)
                            item.MouseLeave:Connect(function() T(item,0.12,{BackgroundColor3 = Theme.Button}):Play() T(item.UIStroke,0.12,{Transparency = 0.6}):Play() end)
                            item.MouseButton1Click:Connect(function() Dropdown:Set(val) listFrame.Visible=false end)
                        end
                        if listFrame.Visible then updateListGeometry(#self._options) end
                    end
                    box.MouseButton1Click:Connect(function()
                        if listFrame.Visible then
                            listFrame.Visible = false
                            T(box.Stroke,0.15,{Transparency = 0.3}):Play()
                            T(arrow,0.18,{Rotation = 90}):Play()
                        else
                            updateListGeometry(#(Dropdown._options or {}))
                            T(box.Stroke,0.15,{Transparency = 0.1}):Play()
                            T(arrow,0.18,{Rotation = 0}):Play()
                        end
                    end)
                    box:GetPropertyChangedSignal("AbsoluteSize"):Connect(function() if listFrame.Visible then updateListGeometry(#(Dropdown._options or {})) end end)
                    box:GetPropertyChangedSignal("AbsolutePosition"):Connect(function() if listFrame.Visible then updateListGeometry(#(Dropdown._options or {})) end end)
                    UserInputService.InputBegan:Connect(function(input)
                        if not listFrame.Visible then return end
                        if input.UserInputType==Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
                            local pos = (input.UserInputType==Enum.UserInputType.Touch) and input.Position or UserInputService:GetMouseLocation()
                            local inside = pos.X >= listFrame.AbsolutePosition.X and pos.X <= listFrame.AbsolutePosition.X + listFrame.AbsoluteSize.X and pos.Y >= listFrame.AbsolutePosition.Y and pos.Y <= listFrame.AbsolutePosition.Y + listFrame.AbsoluteSize.Y
                            local insideBox = pos.X >= box.AbsolutePosition.X and pos.X <= box.AbsolutePosition.X + box.AbsoluteSize.X and pos.Y >= box.AbsolutePosition.Y and pos.Y <= box.AbsolutePosition.Y + box.AbsoluteSize.Y
                            if not inside and not insideBox then
                                listFrame.Visible=false
                                T(box.Stroke,0.15,{Transparency = 0.3}):Play()
                                T(arrow,0.18,{Rotation = 90}):Play()
                            end
                        end
                    end)
                    Dropdown:SetOptions(list)
                    if default ~= nil then Dropdown:Set(default, true) end
                    Library:_registerControl(Dropdown)
                    table.insert(Group._controls, Dropdown)
                    return Dropdown
                end
                -- Textbox
                function Group:AddTextbox(o)
                    o = o or {}
                    local label = tostring(o.Name or "Text")
                    local placeholder = tostring(o.Placeholder or "")
                    local default = tostring(o.Default or "")
                    local cb = o.Callback
                    local id = o.Flag and tostring(o.Flag) or ("%s/%s/%s/%s/%s"):format(Window.Name, Category.Name, Page.Name, Group.Name, label)
                    local row = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.new(1,-2,0,30), Position = UDim2.fromOffset(0,nextY(30)), Parent = gFrame})
                    Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(0.44,-6,1,0), Text = label, Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = row})
                    local box = Create("TextBox", {BackgroundColor3 = Theme.Button, Size = UDim2.new(0.56,-2,1,0), Position = UDim2.new(0.44,6,0,0), ClearTextOnFocus = false, PlaceholderText = placeholder, Text = default, Font = Fonts.Regular, TextSize = 13, TextColor3 = Theme.Text, PlaceholderColor3 = Theme.SubText, Parent = row}, {
                        Create("UICorner", {CornerRadius = UDim.new(0,3)}),
                        Create("UIStroke", {Name = "Stroke", Color = Theme.Stroke, Thickness = 1, Transparency = 0.55}),
                        Create("UIPadding", {PaddingLeft = UDim.new(0,6), PaddingRight = UDim.new(0,6)})
                    })
                    local focusBar = Create("Frame", {BackgroundColor3 = Theme.Accent, BorderSizePixel = 0, Size = UDim2.new(0,0,0,2), AnchorPoint = Vector2.new(0,1), Position = UDim2.new(0,0,1,0), BackgroundTransparency = 1, Parent = box})
                    local Textbox = { id = id, _value = default }
                    function Textbox:Get() return self._value end
                    function Textbox:Set(v, silent) v = tostring(v or "") self._value = v box.Text = v if not silent and type(cb)=="function" then pcall(cb,v) end end
                    box.Focused:Connect(function()
                        focusBar.BackgroundTransparency = 0
                        focusBar.Size = UDim2.new(0,0,0,2)
                        T(focusBar,0.20,{Size = UDim2.new(1,0,0,2)}):Play()
                        T(box.Stroke,0.15,{Transparency = 0.35}):Play()
                    end)
                    box.FocusLost:Connect(function()
                        Textbox:Set(box.Text)
                        local tw1 = T(focusBar,0.18,{Size = UDim2.new(0,0,0,2)})
                        tw1:Play()
                        tw1.Completed:Connect(function() focusBar.BackgroundTransparency = 1 end)
                        T(box.Stroke,0.18,{Transparency = 0.55}):Play()
                    end)
                    Library:_registerControl(Textbox)
                    table.insert(Group._controls, Textbox)
                    return Textbox
                end
                -- Keybind
                function Group:AddKeybind(o)
                    o = o or {}
                    local label = tostring(o.Name or "Keybind")
                    local default = o.Default
                    local cb = o.Callback
                    local id = o.Flag and tostring(o.Flag) or ("%s/%s/%s/%s/%s"):format(Window.Name, Category.Name, Page.Name, Group.Name, label)
                    local row = Create("Frame", {BackgroundTransparency = 1, Size = UDim2.new(1,0,0,30), Position = UDim2.fromOffset(0,nextY(30)), Parent = gFrame})
                    Create("TextLabel", {BackgroundTransparency = 1, Size = UDim2.new(0.5,-8,1,0), Text = label, Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.Text, TextXAlignment = Enum.TextXAlignment.Left, Parent = row})
                    local box = Create("TextButton", {BackgroundColor3 = Theme.Button, AutoButtonColor = false, Size = UDim2.new(0.5,-4,1,0), Position = UDim2.new(0.5,4,0,0), Text = default and default.Name or "Press a key...", Font = Fonts.Medium, TextSize = 13, TextColor3 = Theme.SubText, Parent = row}, {Create("UICorner", {CornerRadius = UDim.new(0,4)}), Create("UIStroke", {Color = Theme.Stroke, Thickness = 1, Transparency = 0.3})})
                    local waiting=false
                    local Keybind = { id = id, _value = default }
                    function Keybind:Get() return self._value end
                    function Keybind:Set(keycode, silent) self._value = keycode box.Text = keycode and keycode.Name or "None" box.TextColor3 = keycode and Theme.Text or Theme.SubText if keycode and not silent and type(cb)=="function" then pcall(cb,keycode) end end
                    box.MouseButton1Click:Connect(function() box.Text="Press any key..." box.TextColor3=Theme.Text waiting=true end)
                    UserInputService.InputBegan:Connect(function(input) if waiting and input.UserInputType==Enum.UserInputType.Keyboard then waiting=false Keybind:Set(input.KeyCode) end end)
                    Library:_registerControl(Keybind)
                    table.insert(Group._controls, Keybind)
                    return Keybind
                end
                return Group
            end
            table.insert(Category._pages, Page)
            if not Category._selectedPage then Page:Select() end
            return Page
        end
        Category._btn = btn
        Category._label = lbl
        Category._indicator = catInd
        Category._icon = iconImg
        Category._container = catContainer
        table.insert(Window._categories, Category)
        if not Window._selectedCategory then Category:Select() end
        return Category
    end
    -- enhanced mobile toggle (glow + status + hold-to-drag)
    if showMobileBtn then
        local presetColor = Theme.Accent
        local container = Create("Frame", {Name = "MobileToggleContainer", BackgroundTransparency = 1, Position = UDim2.new(1, -80, 0, 120), Size = UDim2.new(0, 70, 0, 70), ZIndex = 1, Parent = RootGui})
        local toggleFrame = Create("Frame", {Name = "MobileToggle", BackgroundColor3 = Color3.fromRGB(27,27,27), BorderSizePixel = 0, Position = UDim2.new(0,10,0,10), Size = UDim2.new(0,50,0,50), ClipsDescendants = false, ZIndex = 2, Parent = container})
        Create("UICorner", {CornerRadius = UDim.new(0,12), Parent = toggleFrame})
        local stroke = Create("UIStroke", {ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Color = presetColor, Thickness = 2, Transparency = 0.3, Parent = toggleFrame})
        local glow = Create("ImageLabel", {Name = "Glow", BackgroundTransparency = 1, Position = UDim2.new(0.5,-30,0.5,-30), Size = UDim2.new(0,60,0,60), Image = "rbxassetid://4996891970", ImageColor3 = presetColor, ImageTransparency = 0.7, ScaleType = Enum.ScaleType.Slice, SliceCenter = Rect.new(20,20,280,280), ZIndex = 1, Parent = toggleFrame})
        local button = Create("TextButton", {Name = "ToggleButton", BackgroundTransparency = 1, Size = UDim2.new(1,0,1,0), Font = Fonts.Medium, Text = "", TextTransparency = 1, AutoButtonColor = false, ZIndex = 3, Parent = toggleFrame})
        local iconContainer = Create("Frame", {Name = "IconContainer", BackgroundTransparency = 1, Size = UDim2.new(1,0,1,0), ZIndex = 3, Parent = button})
        local icon = Create("ImageLabel", {Name = "ToggleIcon", BackgroundTransparency = 1, AnchorPoint = Vector2.new(0.5,0.5), Position = UDim2.new(0.5,0,0.5,0), Size = UDim2.new(0,24,0,24), Image = "rbxassetid://109809645126775", ImageColor3 = Color3.fromRGB(255,255,255), ZIndex = 3, Parent = iconContainer})
        local status = Create("Frame", {Name = "StatusIndicator", BackgroundColor3 = Color3.fromRGB(255,85,85), BorderSizePixel = 0, Position = UDim2.new(1,-12,0,4), Size = UDim2.new(0,8,0,8), ZIndex = 4, Parent = toggleFrame})
        Create("UICorner", {CornerRadius = UDim.new(1,0), Parent = status})
        local open = true
        local holding, dragging = false, false
        local holdStart, dragStart
        local function updateState()
            if open then
                status.BackgroundColor3 = Color3.fromRGB(85,255,127)
                T(toggleFrame,0.3,{BackgroundColor3 = Color3.fromRGB(32,42,32)}):Play()
                T(stroke,0.3,{Transparency = 0.1}):Play()
            else
                status.BackgroundColor3 = Color3.fromRGB(255,85,85)
                T(toggleFrame,0.3,{BackgroundColor3 = Color3.fromRGB(27,27,27)}):Play()
                T(stroke,0.3,{Transparency = 0.3}):Play()
            end
        end
        updateState()
        task.spawn(function()
            while toggleFrame.Parent do
                stroke.Color = presetColor
                glow.ImageColor3 = presetColor
                task.wait()
            end
        end)
        -- Improved drag: start when movement passes threshold; quick tap toggles
        local pressPos
        local dragOffset
        local pressTime
        local DRAG_THRESHOLD = 6
        button.MouseButton1Down:Connect(function()
            holding = true; pressTime = tick(); dragging = false
            local mouse = UserInputService:GetMouseLocation()
            pressPos = Vector2.new(mouse.X, mouse.Y)
            local abs = container.AbsolutePosition
            dragOffset = Vector2.new(mouse.X - abs.X, mouse.Y - abs.Y)
            T(toggleFrame,0.1,{Size = UDim2.new(0,46,0,46), Position = UDim2.new(0,12,0,12)}):Play()
            T(icon,0.1,{Size = UDim2.new(0,20,0,20)}):Play()
        end)
        button.MouseButton1Up:Connect(function()
            local wasTap = holding and (tick() - pressTime) < 0.4 and not dragging
            holding = false
            T(toggleFrame,0.2,{Size = UDim2.new(0,50,0,50), Position = UDim2.new(0,10,0,10)}):Play()
            T(icon,0.2,{Size = UDim2.new(0,24,0,24)}):Play()
            if wasTap then
                open = not open
                root.Visible = open
                updateState()
            end
            dragging = false
            pressPos = nil; dragOffset = nil
        end)
        UserInputService.InputChanged:Connect(function(inp)
            if holding and pressPos and (inp.UserInputType == Enum.UserInputType.MouseMovement or inp.UserInputType == Enum.UserInputType.Touch) then
                local mouse = UserInputService:GetMouseLocation()
                if not dragging then
                    local dx = mouse.X - pressPos.X
                    local dy = mouse.Y - pressPos.Y
                    if (dx*dx + dy*dy) > (DRAG_THRESHOLD*DRAG_THRESHOLD) then
                        dragging = true
                    end
                end
                if dragging and dragOffset then
                    local viewport = workspace.CurrentCamera and workspace.CurrentCamera.ViewportSize or Vector2.new(1920,1080)
                    local newX = mouse.X - dragOffset.X
                    local newY = mouse.Y - dragOffset.Y
                    newX = math.max(0, math.min(viewport.X - container.AbsoluteSize.X, newX))
                    newY = math.max(0, math.min(viewport.Y - container.AbsoluteSize.Y, newY))
                    container.Position = UDim2.new(0, newX, 0, newY)
                end
            end
        end)
        UserInputService.InputEnded:Connect(function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
                if holding then
                    -- emulate release logic if MouseButton1Up missed (e.g., pointer left button area)
                    local wasTap = holding and not dragging and (tick() - (pressTime or tick())) < 0.4
                    holding = false
                    T(toggleFrame,0.2,{Size = UDim2.new(0,50,0,50), Position = UDim2.new(0,10,0,10)}):Play()
                    T(icon,0.2,{Size = UDim2.new(0,24,0,24)}):Play()
                    if wasTap then
                        open = not open
                        root.Visible = open
                        updateState()
                    end
                end
                dragging = false
                pressPos = nil
                dragOffset = nil
            end
        end)
        button.TouchTap:Connect(function()
            if not dragging and not holding then
                open = not open
                root.Visible = open
                updateState()
            end
        end)
        task.spawn(function()
            while toggleFrame.Parent do
                if not open then
                    T(glow,1.5,{ImageTransparency = 0.5}):Play(); task.wait(1.5)
                    T(glow,1.5,{ImageTransparency = 0.7}):Play(); task.wait(1.5)
                else
                    task.wait(0.5)
                end
            end
        end)
    end
    Window.AddTab = Window.AddCategory
    return Window
end
function Library:MakeWindow(o) return self:CreateLibrary(o) end
function Library:NewWindow(o) return self:CreateLibrary(o) end
function Library:SetTheme(t) for k, v in pairs(t or {}) do if Theme[k] ~= nil then Theme[k] = v end end end
function Library:SetFonts(f) for k, v in pairs(f or {}) do if Fonts[k] ~= nil then Fonts[k] = v end end end
return Library
