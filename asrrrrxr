local cloneref = cloneref or function(x) return x end
local library = {
    RainbowColorValue = 0,
    HueSelectionPosition = 0, 
    SafeCall = false, 
    Conn = {},
    Folder = "Dendrite.cc",
    animatetext = false,
    debug = false,
    OCbtn = false
}
local uis = cloneref( game:GetService("UserInputService"))
local tweensv = cloneref(game:GetService("TweenService"))
local rs = cloneref(game:GetService("RunService"))
local plrs = cloneref(game:GetService("Players"))
local lp = plrs.LocalPlayer
local ms = lp:GetMouse()
local ws = cloneref(game:GetService("Workspace"))
local cam = ws.CurrentCamera
local cg = game:GetService("CoreGui")
local httpsv = cloneref(game:GetService("HttpService"))
local PresetColor, Drawing, placeid = Color3.fromRGB(255, 0, 0), Drawing or {}, game.PlaceId
local CloseBind, getgenv = Enum.KeyCode.X, getgenv or {}
local ProtectGui = protectgui or (syn and syn.protect_gui) or (function() end);
local altloaded = false
local rbxgui = cg:FindFirstChild("RobloxGui") or Instance.new("ScreenGui", cg)
if altloaded then
    for i,v in next, rbxgui:GetChildren() do
        if v.Name == "Dendrite.cc" then
            v:Destroy()
        end
    end
	for i,v in next, library.Conn do
		v:Disconnect()
	end
	altloaded = false
end
altloaded= true
local screengui = Instance.new("ScreenGui", rbxgui)
ProtectGui(screengui);
screengui.Name = "Dendrite.cc"
screengui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
task.spawn(function()
	while altloaded do
		library.RainbowColorValue = library.RainbowColorValue + 1 / 255
		library.HueSelectionPosition = library.HueSelectionPosition + 1
		if library.RainbowColorValue >= 1 then
			library.RainbowColorValue = 0
		end
		if library.HueSelectionPosition == 80 then
			library.HueSelectionPosition = 0
		end
		task.wait()
	end
end)
function animateText(display, text, repeatCount, delay)
    if not display then return end
    local animatedRandom = "1234567890"
    for i = 1, #text do
        local revealChar = text:sub(i, i)
        local displayText = text:sub(1, i - 1)
        for _ = 1, math.random(1, 6) do
            local random = math.random(1, #animatedRandom)
            local randomChar = animatedRandom:sub(random, random)
            display.Text = displayText .. randomChar
            task.wait(delay)
            if library.animatetext then
                break
            end
        end
        display.Text = displayText .. revealChar
        task.wait(delay)
        if library.animatetext then
            break
        end
    end
    task.wait(5)
end

function library:Unload()
    if screengui then
        screengui:Destroy()
    end
    for i,v in next, library.Conn do
		v:Disconnect()
	end
    altloaded = false
end

function MakeDraggable(topbarobject, object)
    local Dragging = nil
    local DragInput = nil
    local DragStart = nil
    local StartPosition = nil

    local function Update(input)
        local Delta = input.Position - DragStart
        local pos =
            UDim2.new(
            StartPosition.X.Scale,
            StartPosition.X.Offset + Delta.X,
            StartPosition.Y.Scale,
            StartPosition.Y.Offset + Delta.Y
        )
        object.Position = pos
    end

    library.Conn[#library.Conn + 1] = topbarobject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPosition = object.Position

            library.Conn[#library.Conn + 1] = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)

    library.Conn[#library.Conn + 1] = topbarobject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)

    library.Conn[#library.Conn + 1] = uis.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            Update(input)
        end
    end)
end

function library:ChangeBind(key)
	CloseBind = key
end

function library:Window(title, version, info, preset, closebind)
    CloseBind = closebind or Enum.KeyCode.Z
    PresetColor = preset or Color3.fromRGB(255, 0, 0)
    fs = false
    local Main = Instance.new("Frame")
    local TabHold = Instance.new("Frame")

    local TabHoldLayout = Instance.new("UIListLayout")
    local Title = Instance.new("TextLabel")
    local TabFolder = Instance.new("Folder")
    local DragFrame = Instance.new("Frame")
	local close = Instance.new("ImageButton")

    local line = Instance.new("Frame", Main)
    line.Name = "Line"
    line.Position = UDim2.new(0.28, 0, 0.1, 5)
    line.Size = UDim2.new(0, 1, 0, 270)
    line.BackgroundColor3 = PresetColor
    line.BorderColor3 = PresetColor
    line.BorderSizePixel = 0

    local line2 = Instance.new("Frame", Main)
    line2.Name = "Line"
    line2.Position = UDim2.new(0.6, 18, -0.5, 1)
    line2.Size = UDim2.new(0, 1, 1, 74)
    line2.Rotation = 810
    line2.BorderSizePixel = 0
    line2.BorderColor3 = PresetColor
    line2.BackgroundColor3 = PresetColor

    local line3 = Instance.new("Frame", Main)
    line3.Name = "Line"
    line3.Position = UDim2.new(0.6, 18, -0.5, 270)
    line3.Size = UDim2.new(0, 1, 1, 75)
    line3.Rotation = 810
    line3.BorderSizePixel = 0
    line3.BorderColor3 = PresetColor
    line3.BackgroundColor3 = PresetColor

    local line4 = Instance.new("Frame", Main)
    line4.Name = "Line"
    line4.Position = UDim2.new(1, -10, 0.1, 5)
    line4.Size = UDim2.new(0, 1, 0, 270)
    line4.BorderSizePixel = 0
    line4.BorderColor3 = PresetColor
    line4.BackgroundColor3 = PresetColor

    Main.Name = "Main"
    Main.Parent = screengui
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Color3.fromRGB(1, 1, 1)
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 560, 0, 319)
    Main.ClipsDescendants = false
    Main.Visible = true

    local boframe = Instance.new("Frame", Main)
    boframe.Name = "BorderFrame"
    boframe.AnchorPoint = Vector2.new(0.5, 0.5)
    boframe.Position = UDim2.new(0.5, 0, 0.5, 0)
    boframe.Size = UDim2.new(1, 20, 1, 20)
    boframe.BackgroundTransparency = 1
    boframe.ZIndex = 0
    boframe.ClipsDescendants = false

    local img1 = Instance.new("ImageLabel", boframe)
    img1.Name = "TopShadow"
    img1.Image = "rbxassetid://5587865193"
    img1.ImageColor3 = Color3.fromRGB(0, 0, 0)
    img1.AnchorPoint = Vector2.new(0.5, 0.5)
    img1.Position = UDim2.new(0.5, 0, 0.5, 0)
    img1.Size = UDim2.new(1.6, 0, 1.4, 0)
    img1.BackgroundTransparency = 1
    img1.ZIndex = 7

    local img2 = Instance.new("ImageLabel", boframe)
    img2.Name = "BottomShadow"
    img2.Image = "rbxassetid://5587865193"
    img2.ImageColor3 = Color3.fromRGB(0, 0, 0)
    img2.AnchorPoint = Vector2.new(0.5, 0.5)
    img2.Position = UDim2.new(0.5, 0, 0.5, 0)
    img2.Size = UDim2.new(1.6, 0, 1.4, 0)
    img2.BackgroundTransparency = 1
    img2.ZIndex = 7

    local FadeBackgroundFrame = Instance.new("Frame")

	FadeBackgroundFrame.Name = "FadeBackgroundFrame"
	FadeBackgroundFrame.Parent = Main
	FadeBackgroundFrame.BackgroundColor3 = Color3.fromRGB(27,27, 27)
	FadeBackgroundFrame.BackgroundTransparency = 1.000
	FadeBackgroundFrame.BorderSizePixel = 0
	FadeBackgroundFrame.Size = UDim2.new(1, 0, 1, 0)
	FadeBackgroundFrame.ZIndex = 3

	close.Name = "close"
    close.Parent = Main
    close.BackgroundTransparency = 1.000
    close.Position = UDim2.new(0.94, 0, 0.01, 8)
    close.Size = UDim2.new(0, 21, 0, 21)
    close.ZIndex = 2
    close.Image = "rbxassetid://3926305904"
    close.ImageRectOffset = Vector2.new(284, 4)
    close.ImageRectSize = Vector2.new(24, 24)
    close.MouseButton1Click:Connect(function()
        Main.Visible = false
    end)

    TabHold.Name = "TabHold"
    TabHold.Parent = Main
    TabHold.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabHold.BackgroundTransparency = 1.000
    TabHold.Position = UDim2.new(0.0339285731, 0, 0.147335425, 0)
    TabHold.Size = UDim2.new(0, 107, 0, 254)

    TabHoldLayout.Name = "TabHoldLayout"
    TabHoldLayout.Parent = TabHold
    TabHoldLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabHoldLayout.Padding = UDim.new(0, 11)

    Title.Name = "Title"
    Title.Parent = Main
    Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Title.BackgroundTransparency = 1.000
    Title.Position = UDim2.new(0.0339285731, 0, 0.0274263314, 0)
    Title.Size = UDim2.new(0, 200, 0, 23)
    Title.Font = Enum.Font.GothamBlack
    Title.Text = title or "Unknown Title"

    local textDisplays = {
        title,
        version,
        info
    }

    coroutine.wrap(function()
        while altloaded do
            local repeatCount = 10
            local delay = 0.05
            for _, v in ipairs(textDisplays) do
                animateText(Title, v, repeatCount, delay)
            end
            if library.animatetext then
                Title.Text = title .. " " .. version
                break
            end
            task.wait(5)
        end
    end)()

    task.spawn(function()
        while altloaded do
            Title.TextColor3 = PresetColor
            line.BackgroundColor3 = PresetColor
            line2.BackgroundColor3 = PresetColor
            line3.BackgroundColor3 = PresetColor
            line4.BackgroundColor3 = PresetColor
            task.wait()
        end
    end)

    Title.TextSize = 20
    Title.TextXAlignment = Enum.TextXAlignment.Left

    DragFrame.Name = "DragFrame"
    DragFrame.Parent = Main
    DragFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    DragFrame.BackgroundTransparency = 1.000
    DragFrame.Size = UDim2.new(0, 560, 0, 41)

    MakeDraggable(DragFrame, Main)

    library.Conn[#library.Conn + 1] = uis.InputBegan:Connect(function(io, p)
        if io.KeyCode == CloseBind then
            if Main.Visible then
                Main.Visible = false
			elseif Main.Visible == false then
                Main.Visible = true
            end
        end
    end)

	local altname = "Show"
	local ismobile = table.find({Enum.Platform.IOS, Enum.Platform.Android}, uis:GetPlatform())
	if cg:FindFirstChild(altname) then
		cg:FindFirstChild(altname):Destroy()
	end

	if ismobile then
		if not cg:FindFirstChild(altname) then
			local ScreenGui = Instance.new("ScreenGui", cg)
			ScreenGui.Name = altname
			local QuickCapture = Instance.new("TextButton", ScreenGui)
			QuickCapture.Name = "UI"
			QuickCapture.BackgroundColor3 = Color3.fromRGB(85, 0, 255)
			QuickCapture.BackgroundTransparency = 0.14
			QuickCapture.Position = UDim2.new(0.93, 0, 0, 40)
			QuickCapture.Size = UDim2.new(0, 33, 0, 33)
			QuickCapture.Font = Enum.Font.SourceSansBold
			QuickCapture.Text = "O/C"
			QuickCapture.TextColor3 = Color3.fromRGB(255, 0, 0)
			QuickCapture.TextSize = 20.000
			QuickCapture.TextWrapped = true
			QuickCapture.Draggable = library.OCbtn
			
			library.Conn[#library.Conn + 1] = QuickCapture.MouseButton1Click:Connect(function()
				if Main.Visible == false then
					Main.Visible = true
				else
					Main.Visible = false
				end
			end)
		end
	end

    TabFolder.Name = "TabFolder"
    TabFolder.Parent = Main

    function library:ChangePresetColor(toch)
        PresetColor = toch
    end

    function library:Notification(texttitle, textdesc, textbtn)
        local NotificationHold = Instance.new("TextButton")
        local NotificationFrame = Instance.new("Frame")
        local OkayBtn = Instance.new("TextButton")
        local OkayBtnCorner = Instance.new("UICorner")
        local OkayBtnTitle = Instance.new("TextLabel")
        local NotificationTitle = Instance.new("TextLabel")
        local NotificationDesc = Instance.new("TextLabel")

        NotificationHold.Name = "NotificationHold"
        NotificationHold.Parent = Main
        NotificationHold.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        NotificationHold.BackgroundTransparency = 1.000
        NotificationHold.BorderSizePixel = 0
        NotificationHold.Size = UDim2.new(0, 560, 0, 319)
        NotificationHold.AutoButtonColor = false
        NotificationHold.Font = Enum.Font.SourceSans
        NotificationHold.Text = ""
        NotificationHold.TextColor3 = Color3.fromRGB(0, 0, 0)
        NotificationHold.TextSize = 14.000

        wait(0.4)

        NotificationFrame.Name = "NotificationFrame"
        NotificationFrame.Parent = NotificationHold
        NotificationFrame.AnchorPoint = Vector2.new(0.5, 0.5)
        NotificationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        NotificationFrame.BorderSizePixel = 0
        NotificationFrame.ClipsDescendants = true
        NotificationFrame.Position = UDim2.new(0.5, 0, 0.498432577, 0)
        NotificationFrame.Size = UDim2.new(0, 164, 0, 193)

        OkayBtn.Name = "OkayBtn"
        OkayBtn.Parent = NotificationFrame
        OkayBtn.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
        OkayBtn.Position = UDim2.new(0.0609756112, 0, 0.720207274, 0)
        OkayBtn.Size = UDim2.new(0, 144, 0, 42)
        OkayBtn.AutoButtonColor = false
        OkayBtn.Font = Enum.Font.SourceSans
        OkayBtn.Text = ""
        OkayBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
        OkayBtn.TextSize = 14.000

        OkayBtnCorner.CornerRadius = UDim.new(0, 5)
        OkayBtnCorner.Name = "OkayBtnCorner"
        OkayBtnCorner.Parent = OkayBtn

        OkayBtnTitle.Name = "OkayBtnTitle"
        OkayBtnTitle.Parent = OkayBtn
        OkayBtnTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        OkayBtnTitle.BackgroundTransparency = 1.000
        OkayBtnTitle.Position = UDim2.new(0.0763888881, 0, 0, 0)
        OkayBtnTitle.Size = UDim2.new(0, 181, 0, 42)
        OkayBtnTitle.Font = Enum.Font.Gotham
        OkayBtnTitle.Text = textbtn
        OkayBtnTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        OkayBtnTitle.TextSize = 14.000
        OkayBtnTitle.TextXAlignment = Enum.TextXAlignment.Left

        NotificationTitle.Name = "NotificationTitle"
        NotificationTitle.Parent = NotificationFrame
        NotificationTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        NotificationTitle.BackgroundTransparency = 1.000
        NotificationTitle.Position = UDim2.new(0.0670731738, 0, 0.0829015523, 0)
        NotificationTitle.Size = UDim2.new(0, 143, 0, 26)
        NotificationTitle.Font = Enum.Font.Gotham
        NotificationTitle.Text = texttitle
        NotificationTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        NotificationTitle.TextSize = 18.000
        NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left

        NotificationDesc.Name = "NotificationDesc"
        NotificationDesc.Parent = NotificationFrame
        NotificationDesc.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        NotificationDesc.BackgroundTransparency = 1.000
        NotificationDesc.Position = UDim2.new(0.0670000017, 0, 0.218999997, 0)
        NotificationDesc.Size = UDim2.new(0, 143, 0, 91)
        NotificationDesc.Font = Enum.Font.Gotham
        NotificationDesc.Text = textdesc
        NotificationDesc.TextColor3 = Color3.fromRGB(255, 255, 255)
        NotificationDesc.TextSize = 15.000
        NotificationDesc.TextWrapped = true
        NotificationDesc.TextXAlignment = Enum.TextXAlignment.Left
        NotificationDesc.TextYAlignment = Enum.TextYAlignment.Top


        library.Conn[#library.Conn + 1] = OkayBtn.MouseButton1Click:Connect(function()
            NotificationFrame.Size = UDim2.new(0, 164, 0, 193)
            wait(.4)
            NotificationHold:Destroy()
        end)
    end
    local tabhold = {}
    function tabhold:Tab(text)
        local TabBtn = Instance.new("TextButton")
        local TabTitle = Instance.new("TextLabel")
        local TabBtnIndicator = Instance.new("Frame")
        local TabBtnIndicatorCorner = Instance.new("UICorner")

        TabBtn.Name = "TabBtn"
        TabBtn.Parent = TabHold
        TabBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabBtn.BackgroundTransparency = 1.000
        TabBtn.Size = UDim2.new(0, 107, 0, 21)
        TabBtn.Font = Enum.Font.SourceSans
        TabBtn.Text = ""
        TabBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
        TabBtn.TextSize = 14.000

        TabTitle.Name = "TabTitle"
        TabTitle.Parent = TabBtn
        TabTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabTitle.BackgroundTransparency = 1.000
        TabTitle.Size = UDim2.new(0, 107, 0, 21)
        TabTitle.Font = Enum.Font.Gotham
        TabTitle.Text = text
        TabTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        TabTitle.TextSize = 14.000
        TabTitle.TextXAlignment = Enum.TextXAlignment.Left

        TabBtnIndicator.Name = "TabBtnIndicator"
        TabBtnIndicator.Parent = TabBtn
        TabBtnIndicator.BackgroundColor3 = PresetColor
        TabBtnIndicator.BorderSizePixel = 0
        TabBtnIndicator.Position = UDim2.new(0, 0, 1, 0)
        TabBtnIndicator.Size = UDim2.new(0, 0, 0, 5)

        TabBtnIndicatorCorner.Name = "TabBtnIndicatorCorner"
        TabBtnIndicatorCorner.Parent = TabBtnIndicator

        coroutine.wrap(function()
            while altloaded do
                TabBtnIndicator.BackgroundColor3 = PresetColor
				task.wait()
            end
        end)()

        local Tab = Instance.new("ScrollingFrame")
        local TabLayout = Instance.new("UIListLayout")

        Tab.Name = "Tab"
        Tab.Parent = TabFolder
        Tab.Active = true
        Tab.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Tab.BackgroundTransparency = 1.000
        Tab.BorderSizePixel = 0
        Tab.Position = UDim2.new(0.31400001, 0, 0.147, 0)
        Tab.Size = UDim2.new(0, 373, 0, 254)
        Tab.CanvasSize = UDim2.new(0, 0, 0, 0)
        Tab.ScrollBarThickness = 3
        Tab.Visible = false

        TabLayout.Name = "TabLayout"
        TabLayout.Parent = Tab
        TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabLayout.Padding = UDim.new(0, 6)

        if fs == false then
            fs = true
            TabBtnIndicator.Size = UDim2.new(0, 13, 0, 2)
            TabTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            Tab.Visible = true
        end

        library.Conn[#library.Conn + 1] = TabBtn.MouseButton1Click:Connect(function()
            for i, v in next, TabFolder:GetChildren() do
                if v.Name == "Tab" then
                    v.Visible = false
                end
                Tab.Visible = true
            end
            for i, v in next, TabHold:GetChildren() do
                if v.Name == "TabBtn" then
                    v.TabBtnIndicator.Size = UDim2.new(0, 0, 0, 2)
                    TabBtnIndicator.Size = UDim2.new(0, 13, 0, 2)
                end
            end
        end)
        local tabcontent = {}
        function tabcontent:Button(text, callback)
            local Button = Instance.new("TextButton")
            local ButtonCorner = Instance.new("UICorner")
            local ButtonTitle = Instance.new("TextLabel")
            Button.Name = "Button"
            Button.Parent = Tab
            Button.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            Button.Size = UDim2.new(0, 363, 0, 42)
            Button.AutoButtonColor = false
            Button.Font = Enum.Font.SourceSans
            Button.Text = ""
            Button.TextColor3 = Color3.fromRGB(0, 0, 0)
            Button.TextSize = 14.000
            ButtonCorner.CornerRadius = UDim.new(0, 5)
            ButtonCorner.Name = "ButtonCorner"
            ButtonCorner.Parent = Button
            ButtonTitle.Name = "ButtonTitle"
            ButtonTitle.Parent = Button
            ButtonTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ButtonTitle.BackgroundTransparency = 1.000
            ButtonTitle.Position = UDim2.new(0.0358126722, 0, 0, 0)
            ButtonTitle.Size = UDim2.new(0, 187, 0, 42)
            ButtonTitle.Font = Enum.Font.SourceSans
            ButtonTitle.Text = text
            ButtonTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            ButtonTitle.TextSize = 18
            ButtonTitle.TextXAlignment = Enum.TextXAlignment.Left
            library.Conn[#library.Conn + 1] = Button.MouseButton1Click:Connect(function()
                local suc, res = pcall(callback)
                if library.debug then
                    warn("Callback Error: ", res)
                end
            end)

            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
        end

        function tabcontent:Toggle(text, default, callback, flag)
            local flag = flag or text
            local toggled = default or false
            
            local Toggle = Instance.new("TextButton")
            local ToggleCorner = Instance.new("UICorner")
            local ToggleTitle = Instance.new("TextLabel")
            local FrameToggle1 = Instance.new("Frame")
            local FrameToggle1Corner = Instance.new("UICorner")
            local FrameToggle2 = Instance.new("Frame")
            local FrameToggle2Corner = Instance.new("UICorner")
            local FrameToggle3 = Instance.new("Frame")
            local FrameToggle3Corner = Instance.new("UICorner")
            local FrameToggleCircle = Instance.new("Frame")
            local FrameToggleCircleCorner = Instance.new("UICorner")
            
            Toggle.Name = "Toggle"
            Toggle.Parent = Tab
            Toggle.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            Toggle.Position = UDim2.new(0.215625003, 0, 0.446271926, 0)
            Toggle.Size = UDim2.new(0, 363, 0, 42)
            Toggle.AutoButtonColor = false
            Toggle.Font = Enum.Font.SourceSans
            Toggle.Text = ""
            Toggle.TextColor3 = Color3.fromRGB(0, 0, 0)
            Toggle.TextSize = 14

            ToggleCorner.CornerRadius = UDim.new(0, 5)
            ToggleCorner.Name = "ToggleCorner"
            ToggleCorner.Parent = Toggle

            ToggleTitle.Name = "ToggleTitle"
            ToggleTitle.Parent = Toggle
            ToggleTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ToggleTitle.BackgroundTransparency = 1.000
            ToggleTitle.Position = UDim2.new(0.05, 0, 0, 0)
            ToggleTitle.Size = UDim2.new(0.95, 0, 0, 40)
            ToggleTitle.Font = Enum.Font.SourceSans
            ToggleTitle.Text = text
            ToggleTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleTitle.TextSize = 18
            ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left

            FrameToggle1.Name = "FrameToggle1"
            FrameToggle1.Parent = Toggle
            FrameToggle1.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameToggle1.Position = UDim2.new(0.859504104, 0, 0.285714298, 0)
            FrameToggle1.Size = UDim2.new(0, 37, 0, 18)

            FrameToggle1Corner.Name = "FrameToggle1Corner"
            FrameToggle1Corner.Parent = FrameToggle1

            FrameToggle2.Name = "FrameToggle2"
            FrameToggle2.Parent = FrameToggle1
            FrameToggle2.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            FrameToggle2.Position = UDim2.new(0.0489999987, 0, 0.0930000022, 0)
            FrameToggle2.Size = UDim2.new(0, 33, 0, 14)

            FrameToggle2Corner.Name = "FrameToggle2Corner"
            FrameToggle2Corner.Parent = FrameToggle2

            FrameToggle3.Name = "FrameToggle3"
            FrameToggle3.Parent = FrameToggle1
            FrameToggle3.BackgroundColor3 = PresetColor
            FrameToggle3.BackgroundTransparency = 1.000
            FrameToggle3.Size = UDim2.new(0, 37, 0, 18)

            FrameToggle3Corner.Name = "FrameToggle3Corner"
            FrameToggle3Corner.Parent = FrameToggle3

            FrameToggleCircle.Name = "FrameToggleCircle"
            FrameToggleCircle.Parent = FrameToggle1
            FrameToggleCircle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameToggleCircle.Position = UDim2.new(0.127000004, 0, 0.222000003, 0)
            FrameToggleCircle.Size = UDim2.new(0, 10, 0, 10)

            FrameToggleCircleCorner.Name = "FrameToggleCircleCorner"
            FrameToggleCircleCorner.Parent = FrameToggleCircle
            
            coroutine.wrap(function()
                while altloaded do
                    FrameToggle3.BackgroundColor3 = PresetColor
                    task.wait()
                end
            end)()
            
            local function ToggleState(state)
                if state then
                    tweensv:Create(Toggle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(37, 37, 37)}):Play()
                    tweensv:Create(FrameToggle1, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    tweensv:Create(FrameToggle2, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    tweensv:Create(FrameToggle3, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                    tweensv:Create(FrameToggleCircle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(255, 255, 255)}):Play()
                    FrameToggleCircle.Position = UDim2.new(0.587, 0, 0.222000003, 0)
                else
                    tweensv:Create(Toggle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(34, 34, 34)}):Play()
                    tweensv:Create(FrameToggle1, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                    tweensv:Create(FrameToggle2, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                    tweensv:Create(FrameToggle3, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    tweensv:Create(FrameToggleCircle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
                    FrameToggleCircle.Position = UDim2.new(0.127000004, 0, 0.222000003, 0)
                end
                toggled = state
                
                if callback then
                    task.spawn(function()
                        local success, err = pcall(callback, toggled)
                        if not success and library.debug then
                            warn("Toggle Callback Error:", err)
                        end
                    end)
                end
            end
            
            local toggle = {
                value = toggled,
                set = function(self, state)
                    if type(state) == "boolean" then
                        ToggleState(state)
                        self.value = state
                    end
                    return self
                end,
                toggle = function(self)
                    self:set(not toggled)
                    return self
                end,
                enable = function(self)
                    if not toggled then
                        self:set(true)
                    end
                    return self
                end,
                disable = function(self)
                    if toggled then
                        self:set(false)
                    end
                    return self
                end,
                getState = function(self)
                    return toggled
                end,
                onStateChanged = function(self, newCallback)
                    callback = newCallback
                    return self
                end
            }

            if not library.flags then library.flags = {} end
            library.flags[flag] = toggle

            library.Conn[#library.Conn + 1] = Toggle.MouseButton1Click:Connect(function()
                toggle:set(not toggled)
            end)
            
            library.Conn[#library.Conn + 1] = Toggle.MouseEnter:Connect(function()
                tweensv:Create(Toggle, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(38, 38, 38)}):Play()
            end)
            
            library.Conn[#library.Conn + 1] = Toggle.MouseLeave:Connect(function()
                tweensv:Create(Toggle, TweenInfo.new(0.2), {BackgroundColor3 = toggled and Color3.fromRGB(37, 37, 37) or Color3.fromRGB(34, 34, 34)}):Play()
            end)
            
            if default then
                ToggleState(true)
            end
            
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
            return toggle
        end
        
        function tabcontent:KeybindT(text, default, keybind, callback, flag)
            local flag = flag or text
            local toggled = default or false
            local assignedKey = keybind or Enum.KeyCode.Unknown
            local SelectingKey = false

            local Toggle = Instance.new("TextButton")
            local ToggleCorner = Instance.new("UICorner")
            local ToggleTitle = Instance.new("TextLabel")
            local FrameToggle1 = Instance.new("Frame")
            local FrameToggle1Corner = Instance.new("UICorner")
            local FrameToggle2 = Instance.new("Frame")
            local FrameToggle2Corner = Instance.new("UICorner")
            local FrameToggle3 = Instance.new("Frame")
            local FrameToggle3Corner = Instance.new("UICorner")
            local FrameToggleCircle = Instance.new("Frame")
            local FrameToggleCircleCorner = Instance.new("UICorner")

            Toggle.Name = "Toggle"
            Toggle.Parent = Tab
            Toggle.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            Toggle.Position = UDim2.new(0.215625003, 0, 0.446271926, 0)
            Toggle.Size = UDim2.new(0, 363, 0, 42)
            Toggle.AutoButtonColor = false
            Toggle.Font = Enum.Font.SourceSans
            Toggle.Text = ""
            Toggle.TextColor3 = Color3.fromRGB(0, 0, 0)
            Toggle.TextSize = 14

            ToggleCorner.CornerRadius = UDim.new(0, 5)
            ToggleCorner.Name = "ToggleCorner"
            ToggleCorner.Parent = Toggle

            ToggleTitle.Name = "ToggleTitle"
            ToggleTitle.Parent = Toggle
            ToggleTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ToggleTitle.BackgroundTransparency = 1.000
            ToggleTitle.Position = UDim2.new(0.05, 0, 0, 0)
            ToggleTitle.Size = UDim2.new(0.6, 0, 0, 40)
            ToggleTitle.Font = Enum.Font.SourceSans
            ToggleTitle.Text = text
            ToggleTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            ToggleTitle.TextSize = 18
            ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left

            FrameToggle1.Name = "FrameToggle1"
            FrameToggle1.Parent = Toggle
            FrameToggle1.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameToggle1.Position = UDim2.new(0.75, 0, 0.25, 0)
            FrameToggle1.Size = UDim2.new(0, 37, 0, 18)

            FrameToggle1Corner.Parent = FrameToggle1

            FrameToggle2.Name = "FrameToggle2"
            FrameToggle2.Parent = FrameToggle1
            FrameToggle2.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            FrameToggle2.Position = UDim2.new(0.05, 0, 0.1, 0)
            FrameToggle2.Size = UDim2.new(0, 33, 0, 14)

            FrameToggle2Corner.Parent = FrameToggle2

            FrameToggle3.Name = "FrameToggle3"
            FrameToggle3.Parent = FrameToggle1
            FrameToggle3.BackgroundColor3 = PresetColor
            FrameToggle3.BackgroundTransparency = 1.000
            FrameToggle3.Size = UDim2.new(0, 37, 0, 18)

            FrameToggle3Corner.Parent = FrameToggle3

            FrameToggleCircle.Name = "FrameToggleCircle"
            FrameToggleCircle.Parent = FrameToggle1
            FrameToggleCircle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameToggleCircle.Position = UDim2.new(0.1, 0, 0.2, 0)
            FrameToggleCircle.Size = UDim2.new(0, 10, 0, 10)

            FrameToggleCircleCorner.Parent = FrameToggleCircle

            coroutine.wrap(function()
                while altloaded do
                    FrameToggle3.BackgroundColor3 = PresetColor
                    task.wait()
                end
            end)()

            local KeybindLabel

            if uis.KeyboardEnabled then
                KeybindLabel = Instance.new("TextButton")
                KeybindLabel.Name = "KeybindLabel"
                KeybindLabel.Parent = Toggle
                KeybindLabel.BackgroundTransparency = 1
                KeybindLabel.Position = UDim2.new(0.85, 0, 0, 0)
                KeybindLabel.Size = UDim2.new(0.15, 0, 1, 0)
                KeybindLabel.Font = Enum.Font.SourceSans
                KeybindLabel.Text = assignedKey.Name == "Unknown" and "None" or assignedKey.Name
                KeybindLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
                KeybindLabel.TextSize = 16
            end

            local function ToggleState(state)
                toggled = state
                if toggled then
                    FrameToggleCircle:TweenPosition(UDim2.new(0.6, 0, 0.2, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                    FrameToggle3.BackgroundTransparency = 0
                else
                    FrameToggleCircle:TweenPosition(UDim2.new(0.1, 0, 0.2, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Quad, 0.2, true)
                    FrameToggle3.BackgroundTransparency = 1
                end
                
                if keybindT then
                    keybindT.value = toggled
                end
                
                pcall(callback, toggled)
            end

            local keybindT = {
                value = toggled,
                keyCode = assignedKey,
                set = function(self, state)
                    if type(state) == "boolean" then
                        ToggleState(state)
                        self.value = state
                    end
                    return self
                end,
                setKey = function(self, key)
                    if typeof(key) == "EnumItem" and key.EnumType == Enum.KeyCode then
                        assignedKey = key
                        self.keyCode = key
                        if KeybindLabel then
                            KeybindLabel.Text = key.Name == "Unknown" and "None" or key.Name
                        end
                    elseif typeof(key) == "string" then
                        local success, keyEnum = pcall(function()
                            return Enum.KeyCode[key]
                        end)
                        if success and keyEnum then
                            assignedKey = keyEnum
                            self.keyCode = keyEnum
                            if KeybindLabel then
                                KeybindLabel.Text = keyEnum.Name == "Unknown" and "None" or keyEnum.Name
                            end
                        end
                    end
                    return self
                end,
                toggle = function(self)
                    self:set(not toggled)
                    return self
                end,
                enable = function(self)
                    if not toggled then
                        self:set(true)
                    end
                    return self
                end,
                disable = function(self)
                    if toggled then
                        self:set(false)
                    end
                    return self
                end,
                getState = function(self)
                    return toggled
                end
            }
            
            if not library.flags then library.flags = {} end
            library.flags[flag] = keybindT

            if KeybindLabel then
                library.Conn[#library.Conn + 1] = KeybindLabel.MouseButton1Click:Connect(function()
                    if SelectingKey then return end
                    SelectingKey = true
                    KeybindLabel.Text = "Press Key"
                    
                    local connection
                    connection = uis.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.Keyboard then
                            assignedKey = input.KeyCode
                            keybindT.keyCode = assignedKey
                            KeybindLabel.Text = assignedKey.Name == "Unknown" and "None" or assignedKey.Name
                            SelectingKey = false
                            if connection then
                                connection:Disconnect()
                            end
                        end
                    end)
                end)

                library.Conn[#library.Conn + 1] = uis.InputBegan:Connect(function(input, gameProcessed)
                    if gameProcessed or SelectingKey then return end
                    if input and input.KeyCode and assignedKey and input.KeyCode == assignedKey then
                        ToggleState(not toggled)
                    end
                end)
            end

            library.Conn[#library.Conn + 1] = Toggle.MouseButton1Click:Connect(function()
                if not SelectingKey then
                    ToggleState(not toggled)
                end
            end)

            if default then
                ToggleState(true)
            end

            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
            
            return keybindT
        end

function tabcontent:NewSlider(SliderText, min, max, precise, UserFunc, defvalue, flag)
    local flag = flag or SliderText
    local Slider = Instance.new("TextButton")
    local SliderLabel = Instance.new("TextLabel")
    local SliderCorner = Instance.new("UICorner")
    local Sliding = Instance.new("Frame")
    local SlidingCorner = Instance.new("UICorner")
    local Circle = Instance.new("Frame")
    local HideColor = Instance.new("Frame")
    local HideColorCorner = Instance.new("UICorner")
    local CircleCorner = Instance.new("UICorner")
    local Progress = Instance.new("Frame")
    local ProgressCorner = Instance.new("UICorner")
    local CircleStroke = Instance.new("UIStroke")
    local ValueLabel = Instance.new("TextLabel")
    
    -- Same UI creation code as before...
    -- [UI Elements setup code...]
    
    Slider.Name = SliderText
    Slider.Parent = Tab
    Slider.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
    Slider.BorderSizePixel = 0
    Slider.Position = UDim2.new(0.286780387, 0, 0, 0)
    Slider.Size = UDim2.new(0, 363, 0, 40)
    Slider.AutoButtonColor = false
    Slider.Font = Enum.Font.SourceSans
    Slider.Text = ""
    Slider.TextColor3 = Color3.fromRGB(0, 0, 0)
    Slider.TextSize = 14.000

    SliderLabel.Name = "SliderLabel"
    SliderLabel.Parent = Slider
    SliderLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SliderLabel.BackgroundTransparency = 1.000
    SliderLabel.BorderColor3 = Color3.fromRGB(27, 42, 53)
    SliderLabel.BorderSizePixel = 0
    SliderLabel.Position = UDim2.new(0.0500000007, 0, 0, 0)
    SliderLabel.Size = UDim2.new(0.949999988, 0, 1, 0)
    SliderLabel.Font = Enum.Font.Gotham
    SliderLabel.Text = SliderText
    SliderLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    SliderLabel.TextSize = 16.000
    SliderLabel.TextXAlignment = Enum.TextXAlignment.Left

    SliderCorner.CornerRadius = UDim.new(0, 5)
    SliderCorner.Name = "SliderCorner"
    SliderCorner.Parent = Slider

    Sliding.Name = "Sliding"
    Sliding.Parent = Slider
    Sliding.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    Sliding.BorderSizePixel = 0
    Sliding.Position = UDim2.new(0.58, 0, 0.421052635, 0)
    Sliding.Size = UDim2.new(0, 140, 0, 5)

    SlidingCorner.CornerRadius = UDim.new(0, 15)
    SlidingCorner.Name = "SlidingCorner"
    SlidingCorner.Parent = Sliding

    Progress.Name = "Progress"
    Progress.Parent = Sliding
    Progress.BackgroundColor3 = Color3.fromRGB(0, 123, 255)
    Progress.BorderSizePixel = 0
    Progress.Size = UDim2.new(0.5, 0, 1, 0)

    ProgressCorner.CornerRadius = UDim.new(0, 15)
    ProgressCorner.Name = "ProgressCorner"
    ProgressCorner.Parent = Progress

    Circle.Name = "Circle"
    Circle.Parent = Progress
    Circle.AnchorPoint = Vector2.new(0, 0.5)
    Circle.BackgroundColor3 = Color3.fromRGB(0, 123, 255)
    Circle.BorderSizePixel = 0
    Circle.Position = UDim2.new(1, 0, 0.5, 0)
    Circle.Size = UDim2.new(0, 12, 0, 12)
    Circle.ZIndex = 2

    CircleStroke.Parent = Circle
    CircleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    CircleStroke.Thickness = 2
    CircleStroke.Color = Color3.fromRGB(43,43,43)

    ValueLabel.Name = "ValueLabel"
    ValueLabel.Parent = Circle
    ValueLabel.AnchorPoint = Vector2.new(0.5, 0)
    ValueLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ValueLabel.BackgroundTransparency = 1.000
    ValueLabel.BorderSizePixel = 0
    ValueLabel.Position = UDim2.new(0.5, 0, -1.49128079, 0)
    ValueLabel.Size = UDim2.new(0, 25, 0, 18)
    ValueLabel.Font = Enum.Font.GothamSemibold
    ValueLabel.Text = (precise and string.format("%.1f", tostring(defvalue))) or (math.floor(defvalue))
    ValueLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    ValueLabel.TextSize = 14.000

    HideColor.Name = "HideColor"
    HideColor.Parent = Circle
    HideColor.AnchorPoint = Vector2.new(0.5, 0.5)
    HideColor.BackgroundColor3 = Color3.fromRGB(43, 43, 43)
    HideColor.BorderSizePixel = 0
    HideColor.Position = UDim2.new(0.5, 0, 0.5, 0)
    HideColor.Size = UDim2.new(1, 1, 1, 1)
    HideColor.ZIndex = 2

    HideColorCorner.CornerRadius = UDim.new(0, 100)
    HideColorCorner.Name = "HideColorCorner"
    HideColorCorner.Parent = HideColor

    CircleCorner.CornerRadius = UDim.new(0, 100)
    CircleCorner.Name = "CircleCorner"
    CircleCorner.Parent = Circle

    task.spawn(function()
        while altloaded do
            Circle.BackgroundColor3 = PresetColor
            Progress.BackgroundColor3 = PresetColor
            task.wait()
        end
    end)

    -- Important fixed part begins here
    -- Create a local state table for this specific slider
    local thisSlider = {
        dragging = false,
        isSliding = false,
        realValue = defvalue,
        value = (precise and string.format("%.1f", tostring(defvalue))) or (math.floor(defvalue)),
        isSettingFromConfig = false,
        inputChangedConnection = nil
    }

    -- Define the slider object with correct value property and set method
    local slider = {}
    
    -- Define the update function first, so it's available for the set method
    local function updateSlider(val, mouseX)
        local percent
        
        if val then
            val = tonumber(val)
            if val == nil then 
                val = defvalue
            end
            percent = math.clamp((val - min) / (max - min), 0, 1)
        elseif mouseX then
            percent = math.clamp((mouseX - Sliding.AbsolutePosition.X) / Sliding.AbsoluteSize.X, 0, 1)
        else
            percent = math.clamp((ms.X - Sliding.AbsolutePosition.X) / Sliding.AbsoluteSize.X, 0, 1)
        end

        percent = math.clamp(percent, 0, 1)
        
        -- Always directly set the size when called from set method
        if thisSlider.isSettingFromConfig then
            Progress.Size = UDim2.new(percent, 0, 1, 0)
        else
            Progress:TweenSize(UDim2.new(percent, 0, 1, 0), "Out", "Sine", 0.2, true)
        end
        
        thisSlider.realValue = min + (max - min) * percent
        thisSlider.value = precise and string.format("%.1f", tostring(thisSlider.realValue)) or math.floor(thisSlider.realValue)
        ValueLabel.Text = tostring(thisSlider.value)
        
        -- Always update the slider's value property
        slider.value = precise and tonumber(thisSlider.value) or math.floor(thisSlider.realValue)
        
        if UserFunc and not thisSlider.isSettingFromConfig then
            pcall(UserFunc, slider.value)
        end
    end
    
    -- Now define the slider object with proper properties
    slider = {
        value = precise and tonumber(thisSlider.value) or math.floor(thisSlider.realValue),
        set = function(self, val)
            if type(val) == "number" or type(val) == "string" then
                local num = tonumber(val)
                if num == nil then
                    return self
                end
                
                -- Clamp the value
                num = math.clamp(num, min, max)
                
                -- Set the flag to indicate config setting
                thisSlider.isSettingFromConfig = true
                
                -- Call the update function
                updateSlider(num)
                
                -- Reset the flag
                thisSlider.isSettingFromConfig = false
                
                -- Update the slider value directly
                self.value = precise and tonumber(string.format("%.1f", num)) or math.floor(num)
                
                -- Call the user function if provided
                if UserFunc then
                    pcall(UserFunc, self.value)
                end
            end
            return self
        end,
        setMin = function(self, newMin)
            if type(newMin) == "number" then
                min = newMin
                self:set(self.value)
            end
            return self
        end,
        setMax = function(self, newMax)
            if type(newMax) == "number" then
                max = newMax
                self:set(self.value)
            end
            return self
        end,
        getValue = function(self)
            return self.value
        end
    }
    
    -- Initialize the slider with the default value
    if not library.flags then library.flags = {} end
    library.flags[flag] = slider
    
    updateSlider(defvalue)
    
    -- Function to handle slider movement
    local function moveSlider(input)
        if not thisSlider.dragging then return end
        thisSlider.isSliding = true
        updateSlider(nil, input.Position.X)
    end

    -- Connect the slider's input events
    library.Conn[#library.Conn + 1] = Slider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            thisSlider.dragging = true
            thisSlider.isSliding = false
            
            if thisSlider.inputChangedConnection then
                thisSlider.inputChangedConnection:Disconnect()
            end
            
            thisSlider.inputChangedConnection = uis.InputChanged:Connect(function(changedInput)
                if thisSlider.dragging and (changedInput.UserInputType == Enum.UserInputType.MouseMovement or changedInput.UserInputType == Enum.UserInputType.Touch) then
                    moveSlider(changedInput)
                end
            end)
            
            moveSlider(input)
        end
    end)

    library.Conn[#library.Conn + 1] = Slider.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            thisSlider.dragging = false
            thisSlider.isSliding = false
            
            if thisSlider.inputChangedConnection then
                thisSlider.inputChangedConnection:Disconnect()
                thisSlider.inputChangedConnection = nil
            end
        end
    end)

    library.Conn[#library.Conn + 1] = Slider.MouseEnter:Connect(function()
        HideColor:TweenSize(UDim2.new(0, 0, 0, 0), "Out", "Sine", 0.2, true)
    end)

    library.Conn[#library.Conn + 1] = Slider.MouseLeave:Connect(function()
        if not thisSlider.dragging then
            HideColor:TweenSize(UDim2.new(1, 1, 1, 1), "In", "Sine", 0.2, true)
        end
    end)

    library.Conn[#library.Conn + 1] = Slider.AncestryChanged:Connect(function(_, parent)
        if parent == nil and thisSlider.inputChangedConnection then
            thisSlider.inputChangedConnection:Disconnect()
            thisSlider.inputChangedConnection = nil
        end
    end)

    Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
    return slider
end
        function tabcontent:NewDropdown(placeholder, Selectables, func, IsMulti, flag)
            local flag = flag or placeholder
            local Dropdown = Instance.new("TextButton")
            local DropdownCorner = Instance.new("UICorner")
            local DropdownBox = Instance.new("TextButton")
            local ImageLabel = Instance.new("ImageLabel")
            local Tsd = Instance.new("Frame")
            local DropdownListCorner = Instance.new("UICorner")
            local DropdownListHeader = Instance.new("TextLabel")
            local DropdownListHeaderCorner = Instance.new("UICorner")
            local DropdownList = Instance.new("ScrollingFrame")
            local UIListLayout = Instance.new("UIListLayout")
            local DropdownLineTop = Instance.new("Frame")
            local DropdownLineBottom = Instance.new("Frame")
            local CloseButton = Instance.new("TextButton")

            Dropdown.Name = "Dropdown"
            Dropdown.Parent = Tab
            Dropdown.BackgroundColor3 = Color3.fromRGB(31, 31, 31)
            Dropdown.BorderSizePixel = 0
            Dropdown.ClipsDescendants = true
            Dropdown.Position = UDim2.new(0.286780387, 0, 0, 0)
            Dropdown.Size = UDim2.new(0, 363, 0, 42)
            Dropdown.AutoButtonColor = false
            Dropdown.Font = Enum.Font.Gotham
            Dropdown.Text = ""
            Dropdown.TextColor3 = Color3.fromRGB(255, 255, 255)
            Dropdown.TextSize = 14

            DropdownCorner.CornerRadius = UDim.new(0, 5)
            DropdownCorner.Name = "DropdownCorner"
            DropdownCorner.Parent = Dropdown

            DropdownBox.Name = "DropdownBox"
            DropdownBox.Parent = Dropdown
            DropdownBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            DropdownBox.BackgroundTransparency = 1.000
            DropdownBox.BorderSizePixel = 0
            DropdownBox.Position = UDim2.new(0.05, 0, 0, 0)
            DropdownBox.Size = UDim2.new(0.95, 0, 0, 40)
            DropdownBox.Font = Enum.Font.SourceSans
            DropdownBox.Text = placeholder
            DropdownBox.TextColor3 = Color3.fromRGB(255, 255, 255)
            DropdownBox.TextSize = 18
            DropdownBox.TextXAlignment = Enum.TextXAlignment.Left

            ImageLabel.Parent = DropdownBox
            ImageLabel.AnchorPoint = Vector2.new(0, 0.5)
            ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ImageLabel.BackgroundTransparency = 1.000
            ImageLabel.BorderSizePixel = 0
            ImageLabel.Position = UDim2.new(0.910000026, 0, 0.5, 0)
            ImageLabel.Size = UDim2.new(0, 40, 0, 35)
            ImageLabel.Image = "rbxassetid://3926305904"
            ImageLabel.ImageColor3 = Color3.fromRGB(136, 136, 136)
            ImageLabel.ImageRectOffset = Vector2.new(44, 404)
            ImageLabel.ImageRectSize = Vector2.new(36, 36)
            ImageLabel.Rotation = 90

            Tsd.Name = "DropdownPopup_" .. placeholder
            Tsd.Parent = Main
            Tsd.AnchorPoint = Vector2.new(0.5, 0.5)
            Tsd.BackgroundColor3 = Color3.fromRGB(27, 27, 27)
            Tsd.BorderSizePixel = 0
            Tsd.Position = UDim2.new(0.5, 0, 5, 0)
            Tsd.Size = UDim2.new(0, 360, 0, 270)
            Tsd.ZIndex = 10
            Tsd.Visible = true

            DropdownListCorner.CornerRadius = UDim.new(0, 5)
            DropdownListCorner.Name = "DropdownListCorner"
            DropdownListCorner.Parent = Tsd

            DropdownListHeader.Name = "DropdownListHeader"
            DropdownListHeader.Parent = Tsd
            DropdownListHeader.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
            DropdownListHeader.BackgroundTransparency = 1
            DropdownListHeader.Size = UDim2.new(0, 334, 0, 39)
            DropdownListHeader.Font = Enum.Font.GothamSemibold
            DropdownListHeader.TextColor3 = Color3.fromRGB(255, 255, 255)
            DropdownListHeader.TextSize = 17.000
            DropdownListHeader.Text = "  " .. placeholder
            DropdownListHeader.TextXAlignment = Enum.TextXAlignment.Left
            DropdownListHeader.ZIndex = 10

            DropdownListHeaderCorner.Name = "DropdownListHeaderCorner"
            DropdownListHeaderCorner.Parent = DropdownListHeader
            DropdownListHeaderCorner.CornerRadius = UDim.new(0, 5)

            CloseButton.Name = "CloseButton"
            CloseButton.Parent = Tsd
            CloseButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            CloseButton.BackgroundTransparency = 1.000
            CloseButton.BorderSizePixel = 0
            CloseButton.Position = UDim2.new(0.82035929, 0, 0, 0)
            CloseButton.Size = UDim2.new(0, 60, 0, 53)
            CloseButton.Font = Enum.Font.GothamSemibold
            CloseButton.Text = "Close"
            CloseButton.TextColor3 = Color3.fromRGB(0, 124, 255)
            CloseButton.TextSize = 15.000
            CloseButton.ZIndex = 11

            DropdownList.Name = "DropdownList"
            DropdownList.Parent = Tsd
            DropdownList.Active = true
            DropdownList.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            DropdownList.BackgroundTransparency = 1
            DropdownList.BorderSizePixel = 0
            DropdownList.Position = UDim2.new(0, 0, 0, 55)
            DropdownList.Size = UDim2.new(1, 0, 0, 210)
            DropdownList.CanvasSize = UDim2.new(0, 0, 0, 0)
            DropdownList.ScrollBarThickness = 3
            DropdownList.AutomaticCanvasSize = Enum.AutomaticSize.Y
            DropdownList.ZIndex = 11

            UIListLayout.Parent = DropdownList
            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
            UIListLayout.Padding = UDim.new(0, 0)
            UIListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center

            DropdownLineTop.Parent = Tsd
            DropdownLineTop.AnchorPoint = Vector2.new(0.5, 0)
            DropdownLineTop.BackgroundColor3 = Color3.fromRGB(44, 44, 44)
            DropdownLineTop.BorderSizePixel = 0
            DropdownLineTop.Position = UDim2.new(0.5, 0, 0, 54)
            DropdownLineTop.Size = UDim2.new(1, 0, 0, 1)
            DropdownLineTop.ZIndex = 10

            DropdownLineBottom.Parent = Tsd
            DropdownLineBottom.AnchorPoint = Vector2.new(0.5, 0)
            DropdownLineBottom.BackgroundColor3 = Color3.fromRGB(44, 44, 44)
            DropdownLineBottom.BorderSizePixel = 0
            DropdownLineBottom.Position = UDim2.new(0.5, 0, 0, 265)
            DropdownLineBottom.Size = UDim2.new(1, 0, 0, 1)
            DropdownLineBottom.ZIndex = 10

            local Stored = {}
            local SelectedValue = nil
            local SelectedItems = {}

            local dropdown = {
                value = IsMulti and Stored or SelectedValue,
                options = Selectables or {},
            }

            local function NewSelectable(Text, val)
                local SelectableButton = Instance.new("TextButton")
                local SelectableText = Instance.new("TextLabel")
                local SelectableCorner = Instance.new("UICorner")
                local SecFrame = Instance.new("Frame")
                local ChoosedCircle = Instance.new("Frame")
                local InnerCircle = Instance.new("ImageButton")
                local ChoosedCircleCorner = Instance.new("UICorner")
                local ChoosedCircleStroke = Instance.new("UIStroke")

                SelectableButton.Name = Text
                SelectableButton.Parent = DropdownList
                SelectableButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SelectableButton.BackgroundTransparency = 1
                SelectableButton.BorderSizePixel = 0
                SelectableButton.Position = UDim2.new(0.0412844047, 0, 0, 0)
                SelectableButton.Size = UDim2.new(1, 0, 0, 40)
                SelectableButton.AutoButtonColor = false
                SelectableButton.Font = Enum.Font.SourceSansSemibold
                SelectableButton.Text = ""
                SelectableButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                SelectableButton.TextSize = 16.000
                SelectableButton.ZIndex = 12

                SelectableText.Name = "SelectableText"
                SelectableText.Parent = SelectableButton
                SelectableText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SelectableText.BackgroundTransparency = 1.000
                SelectableText.BorderSizePixel = 0
                SelectableText.Position = UDim2.new(0.0799999982, 0, 0, 0)
                SelectableText.Size = UDim2.new(0.920000017, 0, 1, 0)
                SelectableText.Font = Enum.Font.SourceSansSemibold
                SelectableText.Text = "    " .. Text
                SelectableText.TextColor3 = Color3.fromRGB(255, 255, 255)
                SelectableText.TextSize = 18.000
                SelectableText.TextWrapped = true
                SelectableText.TextXAlignment = Enum.TextXAlignment.Left
                SelectableText.ZIndex = 12

                SelectableCorner.Parent = SelectableButton
                SelectableCorner.CornerRadius = UDim.new(0, 3)

                SecFrame.Parent = SelectableButton
                SecFrame.AnchorPoint = Vector2.new(0.5, 0)
                SecFrame.BackgroundColor3 = Color3.fromRGB(44, 44, 44)
                SecFrame.BorderSizePixel = 0
                SecFrame.Position = UDim2.new(0.5, 24, 1, 0)
                SecFrame.Size = UDim2.new(1, 0, 0, 1)
                SecFrame.ZIndex = 12

                ChoosedCircle.Name = "ChoosedCircle"
                ChoosedCircle.Parent = SelectableButton
                ChoosedCircle.AnchorPoint = Vector2.new(0, 0.5)
                ChoosedCircle.BackgroundColor3 = Color3.fromRGB(0, 85, 255)
                ChoosedCircle.BackgroundTransparency = 1.000
                ChoosedCircle.BorderSizePixel = 0
                ChoosedCircle.Position = UDim2.new(0, 5, 0.5, 0)
                ChoosedCircle.Size = UDim2.new(0, 16, 0, 16)
                ChoosedCircle.ZIndex = 13

                InnerCircle.Name = "InnerCircle"
                InnerCircle.Parent = ChoosedCircle
                InnerCircle.AnchorPoint = Vector2.new(0.5, 0.5)
                InnerCircle.BackgroundColor3 = Color3.fromRGB(0, 123, 255)
                InnerCircle.BackgroundTransparency = 1.000
                InnerCircle.BorderSizePixel = 0
                InnerCircle.Position = UDim2.new(0.5, 0, 0.5, 0)
                InnerCircle.Size = UDim2.new(0, 0, 0, 0)
                InnerCircle.Image = "rbxassetid://3926305904"
                InnerCircle.ImageRectOffset = Vector2.new(204, 484)
                InnerCircle.ImageRectSize = Vector2.new(36, 36)
                InnerCircle.ImageTransparency = 0
                InnerCircle.ZIndex = 14

                ChoosedCircleCorner.CornerRadius = UDim.new(0, 100)
                ChoosedCircleCorner.Name = "ChoosedCircleCorner"
                ChoosedCircleCorner.Parent = ChoosedCircle

                ChoosedCircleStroke.Parent = ChoosedCircle
                ChoosedCircleStroke.Name = "CircleStroke"
                ChoosedCircleStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
                ChoosedCircleStroke.LineJoinMode = Enum.LineJoinMode.Round
                ChoosedCircleStroke.Thickness = 1.3
                ChoosedCircleStroke.Transparency = 0
                ChoosedCircleStroke.Color = Color3.fromRGB(44, 44, 44)

                local isSelected = false
                if not IsMulti then
                    isSelected = (SelectedValue == val or (val == nil and SelectedValue == Text))
                    if isSelected then
                        InnerCircle.Size = UDim2.new(0, 12, 0, 12)
                        ChoosedCircle.BackgroundTransparency = 0
                        ChoosedCircleStroke.Thickness = 0
                        DropdownBox.Text = Text
                    end
                elseif IsMulti and Stored[Text] then
                    isSelected = true
                    InnerCircle.Size = UDim2.new(0, 12, 0, 12)
                    ChoosedCircle.BackgroundTransparency = 0
                    ChoosedCircleStroke.Thickness = 0
                end
                
                SelectedItems[SelectableButton] = isSelected

                library.Conn[#library.Conn + 1] = SelectableButton.MouseButton1Click:Connect(function()
                    if not IsMulti then
                        for btn, _ in pairs(SelectedItems) do
                            if btn and btn:IsA("TextButton") and btn ~= SelectableButton then
                                SelectedItems[btn] = false
                                local btnCircle = btn:FindFirstChild("ChoosedCircle")
                                if btnCircle then
                                    tweensv:Create(btnCircle, TweenInfo.new(0.15), {BackgroundTransparency = 1}):Play()
                                    
                                    local circleStroke = btnCircle:FindFirstChild("CircleStroke")
                                    if circleStroke then
                                        tweensv:Create(circleStroke, TweenInfo.new(0.15), {Thickness = 1.3}):Play()
                                    end
                                    
                                    local innerCircle = btnCircle:FindFirstChild("InnerCircle")
                                    if innerCircle then
                                        innerCircle:TweenSize(UDim2.new(0, 0, 0, 0), "Out", "Sine", 0.15, true)
                                    end
                                end
                            end
                        end
                        
                        SelectedItems[SelectableButton] = true
                        SelectedValue = val or Text
                        
                        dropdown.value = SelectedValue
                        
                        DropdownBox.Text = Text
                        
                        if func then
                            pcall(func, Text, val)
                        end
                        
                        InnerCircle:TweenSize(UDim2.new(0, 12, 0, 12), "In", "Sine", 0.15, true)
                        tweensv:Create(ChoosedCircle, TweenInfo.new(0.15), {BackgroundTransparency = 0}):Play()
                        tweensv:Create(ChoosedCircleStroke, TweenInfo.new(0.15), {Thickness = 0}):Play()
                        
                        tweensv:Create(ImageLabel, TweenInfo.new(0.3), {Rotation = 90}):Play()
                        Tsd:TweenPosition(UDim2.new(0.5, 0, 5, 0), "Out", "Quart", 0.3)
                    else
                        local newState = not SelectedItems[SelectableButton]
                        SelectedItems[SelectableButton] = newState
                        
                        if newState then
                            InnerCircle:TweenSize(UDim2.new(0, 12, 0, 12), "In", "Sine", 0.15, true)
                            tweensv:Create(ChoosedCircle, TweenInfo.new(0.15), {BackgroundTransparency = 0}):Play()
                            tweensv:Create(ChoosedCircleStroke, TweenInfo.new(0.15), {Thickness = 0}):Play()
                            Stored[Text] = true
                        else
                            InnerCircle:TweenSize(UDim2.new(0, 0, 0, 0), "In", "Sine", 0.15, true)
                            tweensv:Create(ChoosedCircle, TweenInfo.new(0.15), {BackgroundTransparency = 1}):Play()
                            tweensv:Create(ChoosedCircleStroke, TweenInfo.new(0.15), {Thickness = 1.3}):Play()
                            Stored[Text] = nil
                        end
                        
                        dropdown.value = Stored
                        
                        if func then
                            pcall(func, Stored, newState)
                        end
                    end
                end)

                library.Conn[#library.Conn + 1] = SelectableButton.MouseEnter:Connect(function()
                    tweensv:Create(SelectableButton, TweenInfo.new(0.25), {BackgroundTransparency = 0.96}):Play()
                end)
                
                library.Conn[#library.Conn + 1] = SelectableButton.MouseLeave:Connect(function()
                    tweensv:Create(SelectableButton, TweenInfo.new(0.25), {BackgroundTransparency = 1}):Play()
                end)
                
                return SelectableButton
            end

            dropdown.set = function(self, selected)
                if not self.options then
                    self.options = {}
                end
                
                if selected == nil then
                    if IsMulti then
                        table.clear(Stored)
                        self.value = Stored
                    else
                        SelectedValue = nil
                        self.value = nil
                        DropdownBox.Text = placeholder
                    end
                    
                    for btn, _ in pairs(SelectedItems) do
                        if btn and btn:IsA("TextButton") then
                            SelectedItems[btn] = false
                            local circle = btn:FindFirstChild("ChoosedCircle")
                            if circle then
                                circle.BackgroundTransparency = 1
                                local innerCircle = circle:FindFirstChild("InnerCircle")
                                if innerCircle then
                                    innerCircle.Size = UDim2.new(0, 0, 0, 0)
                                end
                                local stroke = circle:FindFirstChild("CircleStroke")
                                if stroke then
                                    stroke.Thickness = 1.3
                                end
                            end
                        end
                    end
                    
                    return self
                end

                if IsMulti and type(selected) == "table" then
                    table.clear(Stored)
                    for k, v in pairs(selected) do
                        Stored[k] = v
                    end
                    self.value = Stored
                    
                    for btn, _ in pairs(SelectedItems) do
                        if btn and btn:IsA("TextButton") then
                            local isSelected = selected[btn.Name] ~= nil
                            SelectedItems[btn] = isSelected
                            
                            local circle = btn:FindFirstChild("ChoosedCircle")
                            if circle then
                                circle.BackgroundTransparency = isSelected and 0 or 1
                                local innerCircle = circle:FindFirstChild("InnerCircle")
                                if innerCircle then
                                    innerCircle.Size = isSelected and UDim2.new(0, 12, 0, 12) or UDim2.new(0, 0, 0, 0)
                                end
                                local stroke = circle:FindFirstChild("CircleStroke")
                                if stroke then
                                    stroke.Thickness = isSelected and 0 or 1.3
                                end
                            end
                        end
                    end
                else
                    SelectedValue = selected
                    self.value = selected
                    local found = false
                    
                    for _, option in pairs(self.options) do
                        local optionValue = (type(option) == "table") and option.value or option
                        local optionText = (type(option) == "table") and (option.text or tostring(option.value)) or tostring(option)
                        
                        if optionValue == selected or optionText == selected then
                            DropdownBox.Text = optionText
                            found = true
                            
                            for btn, _ in pairs(SelectedItems) do
                                if btn and btn:IsA("TextButton") then
                                    local isSelected = (btn.Name == optionText)
                                    SelectedItems[btn] = isSelected
                                    
                                    local circle = btn:FindFirstChild("ChoosedCircle")
                                    if circle then
                                        circle.BackgroundTransparency = isSelected and 0 or 1
                                        local innerCircle = circle:FindFirstChild("InnerCircle")
                                        if innerCircle then
                                            innerCircle.Size = isSelected and UDim2.new(0, 12, 0, 12) or UDim2.new(0, 0, 0, 0)
                                        end
                                        local stroke = circle:FindFirstChild("CircleStroke")
                                        if stroke then
                                            stroke.Thickness = isSelected and 0 or 1.3
                                        end
                                    end
                                end
                            end
                            
                            break
                        end
                    end
                    
                    if not found then
                        DropdownBox.Text = tostring(selected)
                    end
                end
                
                return self
            end
            
            dropdown.Refresh = function(self, newOptions, selected)
                if not DropdownList then return self end
                
                for _, child in pairs(DropdownList:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                
                table.clear(SelectedItems)
                
                if IsMulti then
                    table.clear(Stored)
                end
                
                if newOptions then
                    self.options = newOptions
                end
                
                if selected ~= nil then
                    self.value = selected
                    SelectedValue = selected
                end
                
                for _, option in pairs(self.options) do
                    if type(option) == "table" then
                        NewSelectable(option.text or tostring(option.value), option.value)
                    else
                        NewSelectable(tostring(option), option)
                    end
                end
                
                self:set(self.value)
                
                return self
            end
            
            dropdown.RemoveOptions = function(self)
                return self:Refresh({})
            end
            
            dropdown.AddOption = function(self, option)
                local newOptions = {}
                
                for _, opt in pairs(self.options) do
                    table.insert(newOptions, opt)
                end
                
                table.insert(newOptions, option)
                
                return self:Refresh(newOptions, self.value)
            end

            if not library.flags then library.flags = {} end
            library.flags[flag] = dropdown

            library.Conn[#library.Conn + 1] = DropdownBox.MouseButton1Click:Connect(function()
                tweensv:Create(ImageLabel, TweenInfo.new(0.3), {Rotation = 180}):Play()
                Tsd:TweenPosition(UDim2.new(0.5, 0, 0.5, 0), "Out", "Quart", 0.3)
            end)
            
            library.Conn[#library.Conn + 1] = CloseButton.MouseButton1Click:Connect(function()
                tweensv:Create(ImageLabel, TweenInfo.new(0.3), {Rotation = 90}):Play()
                Tsd:TweenPosition(UDim2.new(0.5, 0, 5, 0), "Out", "Quart", 0.3)
            end)

            dropdown:Refresh(Selectables)

            if Tab and TabLayout then
                Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
            end
            
            return dropdown
        end

        function tabcontent:Colorpicker(text, preset, callback, flag)
            local flag = flag or text
            local ColorPickerToggled = false
            local OldToggleColor = Color3.fromRGB(0, 0, 0)
            local OldColor = Color3.fromRGB(0, 0, 0)
            local OldColorSelectionPosition = nil
            local OldHueSelectionPosition = nil
            local ColorH, ColorS, ColorV = 1, 1, 1
            local RainbowColorPicker = false
            local ColorPickerInput = nil
            local ColorInput = nil
            local HueInput = nil
            local rainbowSpeed = 1.5
            local isDraggingSpeed = false

            local Colorpicker = Instance.new("Frame")
            local ColorpickerCorner = Instance.new("UICorner")
            local ColorpickerTitle = Instance.new("TextLabel")
            local BoxColor = Instance.new("Frame")
            local BoxColorCorner = Instance.new("UICorner")
            local ConfirmBtn = Instance.new("TextButton")
            local ConfirmBtnCorner = Instance.new("UICorner")
            local ConfirmBtnTitle = Instance.new("TextLabel")
            local ColorpickerBtn = Instance.new("TextButton")
            local RainbowToggle = Instance.new("TextButton")
            local RainbowToggleCorner = Instance.new("UICorner")
            local RainbowToggleTitle = Instance.new("TextLabel")
            local FrameRainbowToggle1 = Instance.new("Frame")
            local FrameRainbowToggle1Corner = Instance.new("UICorner")
            local FrameRainbowToggle2 = Instance.new("Frame")
            local FrameRainbowToggle2_2 = Instance.new("UICorner")
            local FrameRainbowToggle3 = Instance.new("Frame")
            local FrameToggle3 = Instance.new("UICorner")
            local FrameRainbowToggleCircle = Instance.new("Frame")
            local FrameRainbowToggleCircleCorner = Instance.new("UICorner")
            local Color = Instance.new("ImageLabel")
            local ColorCorner = Instance.new("UICorner")
            local ColorSelection = Instance.new("ImageLabel")
            local Hue = Instance.new("ImageLabel")
            local HueCorner = Instance.new("UICorner")
            local HueGradient = Instance.new("UIGradient")
            local HueSelection = Instance.new("ImageLabel")
            
            local RainbowSpeedSlider = Instance.new("Frame")
            local RainbowSpeedSliderCorner = Instance.new("UICorner")
            local RainbowSpeedSliderBar = Instance.new("Frame")
            local RainbowSpeedSliderBarCorner = Instance.new("UICorner")
            local RainbowSpeedSliderCircle = Instance.new("Frame")
            local RainbowSpeedSliderCircleCorner = Instance.new("UICorner")
            local RainbowSpeedLabel = Instance.new("TextLabel")

            Colorpicker.Name = "Colorpicker"
            Colorpicker.Parent = Tab
            Colorpicker.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            Colorpicker.ClipsDescendants = true
            Colorpicker.Position = UDim2.new(-0.541071415, 0, -0.532915354, 0)
            Colorpicker.Size = UDim2.new(0, 363, 0, 42)

            ColorpickerCorner.CornerRadius = UDim.new(0, 5)
            ColorpickerCorner.Name = "ColorpickerCorner"
            ColorpickerCorner.Parent = Colorpicker

            ColorpickerTitle.Name = "ColorpickerTitle"
            ColorpickerTitle.Parent = Colorpicker
            ColorpickerTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ColorpickerTitle.BackgroundTransparency = 1.000
            ColorpickerTitle.Position = UDim2.new(0.0358126722, 0, 0, 0)
            ColorpickerTitle.Size = UDim2.new(0, 187, 0, 42)
            ColorpickerTitle.Font = Enum.Font.SourceSans
            ColorpickerTitle.Text = text
            ColorpickerTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            ColorpickerTitle.TextSize = 18
            ColorpickerTitle.TextXAlignment = Enum.TextXAlignment.Left

            BoxColor.Name = "BoxColor"
            BoxColor.Parent = ColorpickerTitle
            BoxColor.BackgroundColor3 = preset or Color3.fromRGB(255, 0, 4)
            BoxColor.Position = UDim2.new(1.60427809, 0, 0.214285716, 0)
            BoxColor.Size = UDim2.new(0, 41, 0, 23)

            BoxColorCorner.CornerRadius = UDim.new(0, 5)
            BoxColorCorner.Name = "BoxColorCorner"
            BoxColorCorner.Parent = BoxColor

            ConfirmBtn.Name = "ConfirmBtn"
            ConfirmBtn.Parent = ColorpickerTitle
            ConfirmBtn.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            ConfirmBtn.Position = UDim2.new(1.25814295, 0, 1.09037197, 0)
            ConfirmBtn.Size = UDim2.new(0, 105, 0, 32)
            ConfirmBtn.AutoButtonColor = false
            ConfirmBtn.Font = Enum.Font.SourceSans
            ConfirmBtn.Text = ""
            ConfirmBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
            ConfirmBtn.TextSize = 14.000

            ConfirmBtnCorner.CornerRadius = UDim.new(0, 5)
            ConfirmBtnCorner.Name = "ConfirmBtnCorner"
            ConfirmBtnCorner.Parent = ConfirmBtn

            ConfirmBtnTitle.Name = "ConfirmBtnTitle"
            ConfirmBtnTitle.Parent = ConfirmBtn
            ConfirmBtnTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ConfirmBtnTitle.BackgroundTransparency = 1.000
            ConfirmBtnTitle.Size = UDim2.new(0, 33, 0, 32)
            ConfirmBtnTitle.Font = Enum.Font.Gotham
            ConfirmBtnTitle.Text = "Confirm"
            ConfirmBtnTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            ConfirmBtnTitle.TextSize = 14.000
            ConfirmBtnTitle.TextXAlignment = Enum.TextXAlignment.Left

            ColorpickerBtn.Name = "ColorpickerBtn"
            ColorpickerBtn.Parent = ColorpickerTitle
            ColorpickerBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ColorpickerBtn.BackgroundTransparency = 1.000
            ColorpickerBtn.Size = UDim2.new(0, 363, 0, 42)
            ColorpickerBtn.Font = Enum.Font.SourceSans
            ColorpickerBtn.Text = ""
            ColorpickerBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
            ColorpickerBtn.TextSize = 14.000

            RainbowToggle.Name = "RainbowToggle"
            RainbowToggle.Parent = ColorpickerTitle
            RainbowToggle.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            RainbowToggle.Position = UDim2.new(1.26349044, 0, 2.12684202, 0)
            RainbowToggle.Size = UDim2.new(0, 104, 0, 32)
            RainbowToggle.AutoButtonColor = false
            RainbowToggle.Font = Enum.Font.SourceSans
            RainbowToggle.Text = ""
            RainbowToggle.TextColor3 = Color3.fromRGB(0, 0, 0)
            RainbowToggle.TextSize = 14.000

            RainbowToggleCorner.CornerRadius = UDim.new(0, 5)
            RainbowToggleCorner.Name = "RainbowToggleCorner"
            RainbowToggleCorner.Parent = RainbowToggle

            RainbowToggleTitle.Name = "RainbowToggleTitle"
            RainbowToggleTitle.Parent = RainbowToggle
            RainbowToggleTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            RainbowToggleTitle.BackgroundTransparency = 1.000
            RainbowToggleTitle.Size = UDim2.new(0, 33, 0, 32)
            RainbowToggleTitle.Font = Enum.Font.Gotham
            RainbowToggleTitle.Text = "Rainbow"
            RainbowToggleTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            RainbowToggleTitle.TextSize = 14.000
            RainbowToggleTitle.TextXAlignment = Enum.TextXAlignment.Left

            FrameRainbowToggle1.Name = "FrameRainbowToggle1"
            FrameRainbowToggle1.Parent = RainbowToggle
            FrameRainbowToggle1.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameRainbowToggle1.Position = UDim2.new(0.649999976, 0, 0.186000004, 0)
            FrameRainbowToggle1.Size = UDim2.new(0, 37, 0, 18)

            FrameRainbowToggle1Corner.Name = "FrameRainbowToggle1Corner"
            FrameRainbowToggle1Corner.Parent = FrameRainbowToggle1

            FrameRainbowToggle2.Name = "FrameRainbowToggle2"
            FrameRainbowToggle2.Parent = FrameRainbowToggle1
            FrameRainbowToggle2.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            FrameRainbowToggle2.Position = UDim2.new(0.0590000004, 0, 0.112999998, 0)
            FrameRainbowToggle2.Size = UDim2.new(0, 33, 0, 14)

            FrameRainbowToggle2_2.Name = "FrameRainbowToggle2"
            FrameRainbowToggle2_2.Parent = FrameRainbowToggle2

            FrameRainbowToggle3.Name = "FrameRainbowToggle3"
            FrameRainbowToggle3.Parent = FrameRainbowToggle1
            FrameRainbowToggle3.BackgroundColor3 = PresetColor
            FrameRainbowToggle3.BackgroundTransparency = 1.000
            FrameRainbowToggle3.Size = UDim2.new(0, 37, 0, 18)

            FrameToggle3.Name = "FrameToggle3"
            FrameToggle3.Parent = FrameRainbowToggle3

            FrameRainbowToggleCircle.Name = "FrameRainbowToggleCircle"
            FrameRainbowToggleCircle.Parent = FrameRainbowToggle1
            FrameRainbowToggleCircle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            FrameRainbowToggleCircle.Position = UDim2.new(0.127000004, 0, 0.222000003, 0)
            FrameRainbowToggleCircle.Size = UDim2.new(0, 10, 0, 10)

            FrameRainbowToggleCircleCorner.Name = "FrameRainbowToggleCircleCorner"
            FrameRainbowToggleCircleCorner.Parent = FrameRainbowToggleCircle

            Color.Name = "Color"
            Color.Parent = ColorpickerTitle
            Color.BackgroundColor3 = preset or Color3.fromRGB(255, 0, 4)
            Color.Position = UDim2.new(0, 0, 0, 42)
            Color.Size = UDim2.new(0, 194, 0, 80)
            Color.ZIndex = 10
            Color.Image = "rbxassetid://4155801252"

            ColorCorner.CornerRadius = UDim.new(0, 3)
            ColorCorner.Name = "ColorCorner"
            ColorCorner.Parent = Color

            ColorSelection.Name = "ColorSelection"
            ColorSelection.Parent = Color
            ColorSelection.AnchorPoint = Vector2.new(0.5, 0.5)
            ColorSelection.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            ColorSelection.BackgroundTransparency = 1.000
            ColorSelection.Position = UDim2.new(preset and select(3, Color3.toHSV(preset)))
            ColorSelection.Size = UDim2.new(0, 18, 0, 18)
            ColorSelection.Image = "http://www.roblox.com/asset/?id=4805639000"
            ColorSelection.ScaleType = Enum.ScaleType.Fit
            ColorSelection.Visible = false

            Hue.Name = "Hue"
            Hue.Parent = ColorpickerTitle
            Hue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Hue.Position = UDim2.new(0, 202, 0, 42)
            Hue.Size = UDim2.new(0, 25, 0, 80)

            HueCorner.CornerRadius = UDim.new(0, 3)
            HueCorner.Name = "HueCorner"
            HueCorner.Parent = Hue

            HueGradient.Color =
                ColorSequence.new {
                ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)),
                ColorSequenceKeypoint.new(0.20, Color3.fromRGB(234, 255, 0)),
                ColorSequenceKeypoint.new(0.40, Color3.fromRGB(21, 255, 0)),
                ColorSequenceKeypoint.new(0.60, Color3.fromRGB(0, 255, 255)),
                ColorSequenceKeypoint.new(0.80, Color3.fromRGB(0, 17, 255)),
                ColorSequenceKeypoint.new(0.90, Color3.fromRGB(255, 0, 251)),
                ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))
            }
            HueGradient.Rotation = 270
            HueGradient.Name = "HueGradient"
            HueGradient.Parent = Hue

            HueSelection.Name = "HueSelection"
            HueSelection.Parent = Hue
            HueSelection.AnchorPoint = Vector2.new(0.5, 0.5)
            HueSelection.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            HueSelection.BackgroundTransparency = 1.000
            HueSelection.Position = UDim2.new(0.48, 0, 1 - select(1, Color3.toHSV(preset or Color3.fromRGB(255, 0, 4))))
            HueSelection.Size = UDim2.new(0, 18, 0, 18)
            HueSelection.Image = "http://www.roblox.com/asset/?id=4805639000"
            HueSelection.Visible = false
            
            RainbowSpeedSlider.Name = "RainbowSpeedSlider"
            RainbowSpeedSlider.Parent = ColorpickerTitle
            RainbowSpeedSlider.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            RainbowSpeedSlider.Position = UDim2.new(1.26349044, 0, 3.15, 0)
            RainbowSpeedSlider.Size = UDim2.new(0, 104, 0, 32)
            RainbowSpeedSlider.Visible = false
            
            RainbowSpeedSliderCorner.CornerRadius = UDim.new(0, 5)
            RainbowSpeedSliderCorner.Name = "RainbowSpeedSliderCorner"
            RainbowSpeedSliderCorner.Parent = RainbowSpeedSlider
            
            RainbowSpeedLabel.Name = "RainbowSpeedLabel"
            RainbowSpeedLabel.Parent = RainbowSpeedSlider
            RainbowSpeedLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            RainbowSpeedLabel.BackgroundTransparency = 1.000
            RainbowSpeedLabel.Position = UDim2.new(0, 0, 0, 0)
            RainbowSpeedLabel.Size = UDim2.new(0, 104, 0, 15)
            RainbowSpeedLabel.Font = Enum.Font.Gotham
            RainbowSpeedLabel.Text = "Speed: 1.5x"
            RainbowSpeedLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
            RainbowSpeedLabel.TextSize = 12.000
            
            RainbowSpeedSliderBar.Name = "RainbowSpeedSliderBar"
            RainbowSpeedSliderBar.Parent = RainbowSpeedSlider
            RainbowSpeedSliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            RainbowSpeedSliderBar.Position = UDim2.new(0.05, 0, 0.65, 0)
            RainbowSpeedSliderBar.Size = UDim2.new(0, 94, 0, 4)
            
            RainbowSpeedSliderBarCorner.CornerRadius = UDim.new(1, 0)
            RainbowSpeedSliderBarCorner.Name = "RainbowSpeedSliderBarCorner"
            RainbowSpeedSliderBarCorner.Parent = RainbowSpeedSliderBar
            
            RainbowSpeedSliderCircle.Name = "RainbowSpeedSliderCircle"
            RainbowSpeedSliderCircle.Parent = RainbowSpeedSliderBar
            RainbowSpeedSliderCircle.BackgroundColor3 = PresetColor
            RainbowSpeedSliderCircle.Position = UDim2.new(0.5, -5, 0.5, -5)
            RainbowSpeedSliderCircle.Size = UDim2.new(0, 10, 0, 10)
            
            RainbowSpeedSliderCircleCorner.CornerRadius = UDim.new(1, 0)
            RainbowSpeedSliderCircleCorner.Name = "RainbowSpeedSliderCircleCorner"
            RainbowSpeedSliderCircleCorner.Parent = RainbowSpeedSliderCircle

            coroutine.wrap(function()
                while altloaded do
                    FrameRainbowToggle3.BackgroundColor3 = PresetColor
                    RainbowSpeedSliderCircle.BackgroundColor3 = PresetColor
                    task.wait()
                end
            end)()

            local function updateSpeedSlider(speed)
                speed = math.clamp(speed, 0.1, 3)
                rainbowSpeed = speed
                
                local position = (speed - 0.1) / 2.9
                RainbowSpeedSliderCircle.Position = UDim2.new(position, -5, 0.5, -5)
                RainbowSpeedLabel.Text = "Speed: " .. string.format("%.1f", speed) .. "x"
                
                if RainbowConnection then
                    RainbowConnection:Disconnect()
                    
                    local startTime = tick()
                    RainbowConnection = rs.RenderStepped:Connect(function()
                        local timeElapsed = (tick() - startTime) * rainbowSpeed
                        local hue = (math.sin(timeElapsed) + 1) / 2
                        
                        BoxColor.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                        Color.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                        
                        colorpicker.value = BoxColor.BackgroundColor3
                        
                        ColorSelection.Position = UDim2.new(1, 0, 0, 0)
                        HueSelection.Position = UDim2.new(0.48, 0, 1 - hue, 0)
                        
                        pcall(callback, BoxColor.BackgroundColor3)
                    end)
                end
            end

            library.Conn[#library.Conn + 1] = RainbowSpeedSliderBar.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    isDraggingSpeed = true
                    
                    local sliderPos = input.Position.X - RainbowSpeedSliderBar.AbsolutePosition.X
                    local sliderSize = RainbowSpeedSliderBar.AbsoluteSize.X
                    local position = math.clamp(sliderPos / sliderSize, 0, 1)
                    local speed = 0.1 + (position * 2.9)
                    
                    updateSpeedSlider(speed)
                end
            end)
            
            library.Conn[#library.Conn + 1] = RainbowSpeedSliderBar.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    isDraggingSpeed = false
                end
            end)
            
            library.Conn[#library.Conn + 1] = uis.InputChanged:Connect(function(input)
                if isDraggingSpeed and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local sliderPos = input.Position.X - RainbowSpeedSliderBar.AbsolutePosition.X
                    local sliderSize = RainbowSpeedSliderBar.AbsoluteSize.X
                    local position = math.clamp(sliderPos / sliderSize, 0, 1)
                    local speed = 0.1 + (position * 2.9)
                    
                    updateSpeedSlider(speed)
                end
            end)

            library.Conn[#library.Conn + 1] = ColorpickerBtn.MouseButton1Click:Connect(function()
                if ColorPickerToggled == false then
                    ColorSelection.Visible = true
                    HueSelection.Visible = true
                    Colorpicker.Size = UDim2.new(0, 363, 0, RainbowColorPicker and 172 or 132)
                    if RainbowColorPicker then
                        RainbowSpeedSlider.Visible = true
                    end
                    wait(.2)
                    Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
                else
                    ColorSelection.Visible = false
                    HueSelection.Visible = false
                    RainbowSpeedSlider.Visible = false
                    Colorpicker.Size = UDim2.new(0, 363, 0, 42)
                    wait(.2)
                    Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
                end
                ColorPickerToggled = not ColorPickerToggled
            end)

            local colorpicker = {
                value = preset or Color3.fromRGB(255, 0, 4),
                rainbow = false,
                rainbowSpeed = rainbowSpeed,
                set = function(self, color)
                    if typeof(color) ~= "Color3" then return end
                    
                    self.value = color
                    BoxColor.BackgroundColor3 = color
                    Color.BackgroundColor3 = color
                    
                    local h, s, v = Color3.toHSV(color)
                    ColorH, ColorS, ColorV = h, s, v
                    
                    ColorSelection.Position = UDim2.new(s, 0, 1 - v, 0)
                    HueSelection.Position = UDim2.new(0.48, 0, 1 - h, 0)
                    
                    pcall(callback, color)
                    return self
                end,
                setRainbow = function(self, state)
                    RainbowColorPicker = state
                    self.rainbow = state
                    
                    if state then
                        tweensv:Create(FrameRainbowToggle1, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                        tweensv:Create(FrameRainbowToggle2, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                        tweensv:Create(FrameRainbowToggle3, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                        tweensv:Create(FrameRainbowToggleCircle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(255, 255, 255)}):Play()
                        FrameRainbowToggleCircle.Position = UDim2.new(0.587, 0, 0.222000003, 0)
                        
                        RainbowSpeedSlider.Visible = ColorPickerToggled
                        if ColorPickerToggled then
                            Colorpicker.Size = UDim2.new(0, 363, 0, 172)
                            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
                        end
                    else
                        tweensv:Create(FrameRainbowToggle1, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                        tweensv:Create(FrameRainbowToggle2, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                        tweensv:Create(FrameRainbowToggle3, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                        tweensv:Create(FrameRainbowToggleCircle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
                        FrameRainbowToggleCircle.Position = UDim2.new(0.127000004, 0, 0.222000003, 0)
                        
                        RainbowSpeedSlider.Visible = false
                        if ColorPickerToggled then
                            Colorpicker.Size = UDim2.new(0, 363, 0, 132)
                            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
                        end
                    end
                    return self
                end,
                setRainbowSpeed = function(self, speed)
                    updateSpeedSlider(speed)
                    return self
                end
            }

            if not library.flags then library.flags = {} end
            library.flags[flag] = colorpicker

            local function UpdateColorPicker(nope)
                BoxColor.BackgroundColor3 = Color3.fromHSV(ColorH, ColorS, ColorV)
                Color.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
                
                colorpicker.value = BoxColor.BackgroundColor3
                pcall(callback, BoxColor.BackgroundColor3)
            end

            ColorH = 1 - (math.clamp(HueSelection.AbsolutePosition.Y - Hue.AbsolutePosition.Y, 0, Hue.AbsoluteSize.Y) / Hue.AbsoluteSize.Y)
            ColorS = (math.clamp(ColorSelection.AbsolutePosition.X - Color.AbsolutePosition.X, 0, Color.AbsoluteSize.X) / Color.AbsoluteSize.X)
            ColorV = 1 - (math.clamp(ColorSelection.AbsolutePosition.Y - Color.AbsolutePosition.Y, 0, Color.AbsoluteSize.Y) / Color.AbsoluteSize.Y)

            BoxColor.BackgroundColor3 = preset or Color3.fromRGB(255, 0, 4)
            Color.BackgroundColor3 = preset or Color3.fromRGB(255, 0, 4)
            colorpicker.value = BoxColor.BackgroundColor3
            pcall(callback, BoxColor.BackgroundColor3)

            library.Conn[#library.Conn + 1] = Color.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    if RainbowColorPicker then return end

                    if ColorInput then
                        ColorInput:Disconnect()
                    end

                    ColorInput = rs.RenderStepped:Connect(function()
                        local ColorX = (math.clamp(ms.X - Color.AbsolutePosition.X, 0, Color.AbsoluteSize.X) / Color.AbsoluteSize.X)
                        local ColorY = (math.clamp(ms.Y - Color.AbsolutePosition.Y, 0, Color.AbsoluteSize.Y) / Color.AbsoluteSize.Y)

                        ColorSelection.Position = UDim2.new(ColorX, 0, ColorY, 0)
                        ColorS = ColorX
                        ColorV = 1 - ColorY

                        UpdateColorPicker(true)
                    end)
                end
            end)

            library.Conn[#library.Conn + 1] = Color.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    if ColorInput then
                        ColorInput:Disconnect()
                    end
                end
            end)

            library.Conn[#library.Conn + 1] = Hue.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    if RainbowColorPicker then return end

                    if HueInput then
                        HueInput:Disconnect()
                    end

                    HueInput = rs.RenderStepped:Connect(function()
                        local HueY = (math.clamp(ms.Y - Hue.AbsolutePosition.Y, 0, Hue.AbsoluteSize.Y) / Hue.AbsoluteSize.Y)

                        HueSelection.Position = UDim2.new(0.48, 0, HueY, 0)
                        ColorH = 1 - HueY

                        UpdateColorPicker(true)
                    end)
                end
            end)

            library.Conn[#library.Conn + 1] = Hue.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    if HueInput then
                        HueInput:Disconnect()
                    end
                end
            end)

            local RainbowConnection
            
            library.Conn[#library.Conn + 1] = RainbowToggle.MouseButton1Click:Connect(function()
                RainbowColorPicker = not RainbowColorPicker
                colorpicker.rainbow = RainbowColorPicker
                
                RainbowSpeedSlider.Visible = RainbowColorPicker and ColorPickerToggled
                
                if ColorPickerToggled then
                    if RainbowColorPicker then
                        Colorpicker.Size = UDim2.new(0, 363, 0, 172)
                    else
                        Colorpicker.Size = UDim2.new(0, 363, 0, 132)
                    end
                    Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
                end

                if ColorInput then
                    ColorInput:Disconnect()
                end

                if HueInput then
                    HueInput:Disconnect()
                end

                if RainbowColorPicker then
                    OldToggleColor = BoxColor.BackgroundColor3
                    OldColor = Color.BackgroundColor3
                    OldColorSelectionPosition = ColorSelection.Position
                    OldHueSelectionPosition = HueSelection.Position

                    tweensv:Create(FrameRainbowToggle1, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    tweensv:Create(FrameRainbowToggle2, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    tweensv:Create(FrameRainbowToggle3, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                    tweensv:Create(FrameRainbowToggleCircle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(255, 255, 255)}):Play()
                    FrameRainbowToggleCircle.Position = UDim2.new(0.587, 0, 0.222000003, 0)
                    
                    if RainbowConnection then
                        RainbowConnection:Disconnect()
                    end
                    
                    local startTime = tick()
                    
                    RainbowConnection = rs.RenderStepped:Connect(function()
                        local timeElapsed = (tick() - startTime) * rainbowSpeed
                        local hue = (math.sin(timeElapsed) + 1) / 2
                        
                        BoxColor.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                        Color.BackgroundColor3 = Color3.fromHSV(hue, 1, 1)
                        
                        colorpicker.value = BoxColor.BackgroundColor3
                        
                        ColorSelection.Position = UDim2.new(1, 0, 0, 0)
                        HueSelection.Position = UDim2.new(0.48, 0, 1 - hue, 0)
                        
                        pcall(callback, BoxColor.BackgroundColor3)
                    end)
                else
                    tweensv:Create(FrameRainbowToggle1, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                    tweensv:Create(FrameRainbowToggle2, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0}):Play()
                    tweensv:Create(FrameRainbowToggle3, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1}):Play()
                    tweensv:Create(FrameRainbowToggleCircle, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
                    FrameRainbowToggleCircle.Position = UDim2.new(0.127000004, 0, 0.222000003, 0)

                    if RainbowConnection then
                        RainbowConnection:Disconnect()
                        RainbowConnection = nil
                    end

                    BoxColor.BackgroundColor3 = OldToggleColor
                    Color.BackgroundColor3 = OldColor
                    ColorSelection.Position = OldColorSelectionPosition
                    HueSelection.Position = OldHueSelectionPosition
                    colorpicker.value = BoxColor.BackgroundColor3
                    
                    pcall(callback, BoxColor.BackgroundColor3)
                end
            end)

            library.Conn[#library.Conn + 1] = ConfirmBtn.MouseButton1Click:Connect(function()
                ColorSelection.Visible = false
                HueSelection.Visible = false
                RainbowSpeedSlider.Visible = false
                Colorpicker.Size = UDim2.new(0, 363, 0, 42)
                wait(.2)
                Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
                ColorPickerToggled = false
            end)

            library.Conn[#library.Conn + 1] = Colorpicker.Destroying:Connect(function()
                if RainbowConnection then
                    RainbowConnection:Disconnect()
                end
            end)

            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
            return colorpicker
        end

        function tabcontent:Label(text)
            local Label = Instance.new("TextLabel")
            local LabelCorner = Instance.new("UICorner")
            local LabelTitle = Instance.new("TextLabel")

            Label.Name = "Label"
            Label.Parent = Tab
            Label.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            Label.Size = UDim2.new(0, 363, 0, 42)
            Label.Font = Enum.Font.SourceSans
            Label.Text = ""
            Label.TextColor3 = Color3.fromRGB(0, 0, 0)
            Label.TextSize = 14.000

            LabelCorner.CornerRadius = UDim.new(0, 5)
            LabelCorner.Name = "LabelCorner"
            LabelCorner.Parent = Label

            LabelTitle.Name = "LabelTitle"
            LabelTitle.Parent = Label
            LabelTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            LabelTitle.BackgroundTransparency = 1.000
            LabelTitle.Position = UDim2.new(0.0358126722, 0, 0, 0)
            LabelTitle.Size = UDim2.new(0, 187, 0, 42)
            LabelTitle.Font = Enum.Font.GothamBlack
            LabelTitle.Text = text
            LabelTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            LabelTitle.TextSize = 15
            LabelTitle.TextXAlignment = Enum.TextXAlignment.Left

            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
        end

        function tabcontent:Textbox(text, disappear, callback, flag, options)
            local flag = flag or text
            local options = options or {}
            local placeholder = options.placeholder or ""
            local maxChars = options.maxChars
            local filterFunc = options.filter
            local autoFocus = options.autoFocus
            local selectAllOnFocus = options.selectAll
            local Textbox = Instance.new("Frame")
            local TextboxCorner = Instance.new("UICorner")
            local TextboxTitle = Instance.new("TextLabel")
            local TextboxFrame = Instance.new("Frame")
            local TextboxFrameCorner = Instance.new("UICorner")
            local TextBox = Instance.new("TextBox")
            Textbox.Name = "Textbox"
            Textbox.Parent = Tab
            Textbox.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            Textbox.ClipsDescendants = true
            Textbox.Position = UDim2.new(0, 0, 0, 0)
            Textbox.Size = UDim2.new(0, 363, 0, 42)
            TextboxCorner.CornerRadius = UDim.new(0, 5)
            TextboxCorner.Name = "TextboxCorner"
            TextboxCorner.Parent = Textbox
            TextboxTitle.Name = "TextboxTitle"
            TextboxTitle.Parent = Textbox
            TextboxTitle.BackgroundTransparency = 1
            TextboxTitle.Position = UDim2.new(0.0358126722, 0, 0, 0)
            TextboxTitle.Size = UDim2.new(0, 187, 0, 42)
            TextboxTitle.Font = Enum.Font.SourceSans
            TextboxTitle.Text = text
            TextboxTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextboxTitle.TextSize = 18
            TextboxTitle.TextXAlignment = Enum.TextXAlignment.Left
            TextboxFrame.Name = "TextboxFrame"
            TextboxFrame.Parent = Textbox
            TextboxFrame.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
            TextboxFrame.Position = UDim2.new(0.686, 0, 0.214285716, 0)
            TextboxFrame.Size = UDim2.new(0, 100, 0, 23)
            TextboxFrame.ZIndex = 2
            TextboxFrameCorner.CornerRadius = UDim.new(0, 5)
            TextboxFrameCorner.Name = "TextboxFrameCorner"
            TextboxFrameCorner.Parent = TextboxFrame
            TextBox.Name = "TextBox"
            TextBox.Parent = TextboxFrame
            TextBox.BackgroundTransparency = 1
            TextBox.Size = UDim2.new(1, 0, 1, 0)
            TextBox.ZIndex = 3
            TextBox.Font = Enum.Font.Gotham
            TextBox.Text = ""
            TextBox.PlaceholderText = placeholder
            TextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
            TextBox.TextSize = 14
            TextBox.ClearTextOnFocus = false
            local textbox = {
                value = "",
                set = function(self, value)
                    self.value = value or ""
                    TextBox.Text = self.value
                    pcall(callback, self.value)
                    return self
                end,
                clear = function(self)
                    return self:set("")
                end,
                getValue = function(self)
                    return self.value
                end,
                setPlaceholder = function(self, placeholderText)
                    TextBox.PlaceholderText = placeholderText or ""
                    return self
                end
            }
            if not library.flags then library.flags = {} end
            library.flags[flag] = textbox

            library.Conn[#library.Conn + 1] = TextBox:GetPropertyChangedSignal("Text"):Connect(function()
                if maxChars and #TextBox.Text > maxChars then
                    TextBox.Text = string.sub(TextBox.Text, 1, maxChars)
                    return
                end
                
                if filterFunc then
                    local filtered = filterFunc(TextBox.Text)
                    if filtered ~= TextBox.Text then
                        TextBox.Text = filtered
                        return
                    end
                end
                
                textbox.value = TextBox.Text
            end)

            library.Conn[#library.Conn + 1] = TextBox.Focused:Connect(function()
                tweensv:Create(TextboxFrame, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(46, 46, 46)}):Play()
                
                if selectAllOnFocus then
                    TextBox.SelectionStart = 0
                    TextBox.CursorPosition = #TextBox.Text + 1
                end
            end)

            library.Conn[#library.Conn + 1] = TextBox.FocusLost:Connect(function(enterPressed)
                tweensv:Create(TextboxFrame, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(37, 37, 37)}):Play()
                
                if enterPressed and #TextBox.Text > 0 then
                    pcall(callback, TextBox.Text)
                    if disappear then
                        TextBox.Text = ""
                        textbox.value = ""
                    end
                end
            end)

            library.Conn[#library.Conn + 1] = TextboxFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    TextBox:CaptureFocus()
                end
            end)
            
            library.Conn[#library.Conn + 1] = TextboxFrame.MouseEnter:Connect(function()
                if not TextBox:IsFocused() then
                    tweensv:Create(TextboxFrame, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(42, 42, 42)}):Play()
                end
            end)

            library.Conn[#library.Conn + 1] = TextboxFrame.MouseLeave:Connect(function()
                if not TextBox:IsFocused() then
                    tweensv:Create(TextboxFrame, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(37, 37, 37)}):Play()
                end
            end)
            
            if autoFocus then
                task.defer(function()
                    TextBox:CaptureFocus()
                end)
            end
            
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)
            return textbox
        end

        function tabcontent:Bind(text, keypreset, callback, flag)
            local flag = flag or text
            local binding = false
            local Key = keypreset.Name
            local Bind = Instance.new("TextButton")
            local BindCorner = Instance.new("UICorner")
            local BindTitle = Instance.new("TextLabel")
            local BindText = Instance.new("TextLabel")

            Bind.Name = "Bind"
            Bind.Parent = Tab
            Bind.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
            Bind.Size = UDim2.new(0, 363, 0, 42)
            Bind.AutoButtonColor = false
            Bind.Font = Enum.Font.SourceSans
            Bind.Text = ""
            Bind.TextColor3 = Color3.fromRGB(0, 0, 0)
            Bind.TextSize = 14.000

            BindCorner.CornerRadius = UDim.new(0, 5)
            BindCorner.Name = "BindCorner"
            BindCorner.Parent = Bind

            BindTitle.Name = "BindTitle"
            BindTitle.Parent = Bind
            BindTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            BindTitle.BackgroundTransparency = 1.000
            BindTitle.Position = UDim2.new(0.0358126722, 0, 0, 0)
            BindTitle.Size = UDim2.new(0, 187, 0, 42)
            BindTitle.Font = Enum.Font.Gotham
            BindTitle.Text = text
            BindTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            BindTitle.TextSize = 14.000
            BindTitle.TextXAlignment = Enum.TextXAlignment.Left

            BindText.Name = "BindText"
            BindText.Parent = Bind
            BindText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            BindText.BackgroundTransparency = 1.000
            BindText.Position = UDim2.new(0.0358126722, 0, 0, 0)
            BindText.Size = UDim2.new(0, 337, 0, 42)
            BindText.Font = Enum.Font.Gotham
            BindText.Text = Key
            BindText.TextColor3 = Color3.fromRGB(255, 255, 255)
            BindText.TextSize = 14.000
            BindText.TextXAlignment = Enum.TextXAlignment.Right
            
            local keybind = {
                value = keypreset,
                keyName = Key,
                set = function(self, key)
                    if typeof(key) == "string" then
                        local success, keyEnum = pcall(function()
                            return Enum.KeyCode[key]
                        end)
                        if success and keyEnum then
                            self.value = keyEnum
                            self.keyName = key
                            Key = key
                            BindText.Text = key
                        end
                    elseif typeof(key) == "EnumItem" and key.EnumType == Enum.KeyCode then
                        self.value = key
                        self.keyName = key.Name
                        Key = key.Name
                        BindText.Text = key.Name
                    end
                    return self
                end,
                getValue = function(self)
                    return self.value
                end
            }
            
            if not library.flags then library.flags = {} end
            library.flags[flag] = keybind

            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y)

            library.Conn[#library.Conn + 1] = Bind.MouseButton1Click:Connect(function()
                BindText.Text = "..."
                binding = true
                
                local inputwait = uis.InputBegan:wait()
                if inputwait.UserInputType == Enum.UserInputType.Keyboard and inputwait.KeyCode.Name ~= "Unknown" then
                    Key = inputwait.KeyCode.Name
                    keybind.value = inputwait.KeyCode
                    keybind.keyName = inputwait.KeyCode.Name
                    BindText.Text = inputwait.KeyCode.Name
                end
                binding = false
            end)

            library.Conn[#library.Conn + 1] = uis.InputBegan:Connect(function(input, gameProcessed)
                if not binding and not gameProcessed and input.UserInputType == Enum.UserInputType.Keyboard then
                    if input.KeyCode.Name == Key then
                        pcall(callback, Key)
                    end
                end
            end)
            
            library.Conn[#library.Conn + 1] = Bind.MouseEnter:Connect(function()
                tweensv:Create(Bind, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(38, 38, 38)}):Play()
            end)
            
            library.Conn[#library.Conn + 1] = Bind.MouseLeave:Connect(function()
                tweensv:Create(Bind, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(34, 34, 34)}):Play()
            end)
            
            return keybind
        end
        return tabcontent
    end
    return tabhold
end
----------------------------------------------------------------// CONFIG SYSTEM //----------------------------------------------------------------
function library:ConfigSystem(tab, name)
    local dir = library.Folder or "Dendrite.cc"
    
    if not isfolder(dir) then
        makefolder(dir)
    end
    
    local cfg = {
        list = {},
        pick = nil,
        auto = nil
    }
    
    library.flags = library.flags or {}
    
    function sync()
        table.clear(cfg.list)
        
        local ok, files = pcall(listfiles, dir)
        if not ok then 
            return {} 
        end
        
        for _, file in ipairs(files) do
            local name = file:match("[^/\\]+$")
            local item = name and name:match("^(.+)%.json$")
            
            if item then
                table.insert(cfg.list, item)
                
                local got, content = pcall(readfile, file)
                if got then
                    local valid, data = pcall(function() 
                        return game:GetService("HttpService"):JSONDecode(content) 
                    end)
                    
                    if valid and type(data) == "table" and 
                       type(data.metadata) == "table" and data.metadata.autoLoad then
                        cfg.auto = item
                    end
                end
            end
        end
        
        return cfg.list
    end
    
    cfg.sync = sync

function pack(val)
    local typ = typeof(val)
    
    if typ == "Color3" then
        return {
            __type = "Color3",
            r = val.R,
            g = val.G,
            b = val.B
        }
    elseif typ == "EnumItem" then
        return {
            __type = "EnumItem",
            enumType = tostring(val.EnumType),
            value = val.Name
        }
    elseif typ == "table" then
        if type(val.value) == "number" then
            return val.value
        elseif typeof(val.value) == "Color3" then
            local colorData = {
                __type = "Color3",
                r = val.value.R,
                g = val.value.G,
                b = val.value.B
            }
            
            if val.rainbow ~= nil then
                colorData.__rainbow = val.rainbow
            end
            
            return colorData
        end
        
        if val.keyCode or (val.value ~= nil and typeof(val.value) == "EnumItem") then
            local keyData = {
                __type = "Keybind",
                keyName = val.keyName or (val.keyCode and val.keyCode.Name)
            }
            
            if val.keyCode then
                keyData.value = {
                    __type = "EnumItem",
                    enumType = "Enum.KeyCode",
                    value = val.keyCode.Name
                }
            else if val.value then
                keyData.value = pack(val.value)
            end
            end
            
            return keyData
        end
        
        local out = {}
        for k, v in pairs(val) do
            if type(v) ~= "function" then
                out[k] = pack(v)
            end
        end
        return out
    else
        return val
    end
end

function unpack(val)
    if type(val) ~= "table" then 
        return val -- Simple values returned as-is
    end
    
    if val.__type == "Color3" then
        if val.__rainbow then
            -- Return structure needed for colorpickers with rainbow
            return {
                value = Color3.new(val.r, val.g, val.b),
                rainbow = val.__rainbow
            }
        end
        return Color3.new(val.r, val.g, val.b)
    elseif val.__type == "EnumItem" then
        local typ = val.enumType
        local name = typ:match("Enum%.([^%s]+)")
        
        if name and Enum[name] then
            return Enum[name][val.value]
        end
        return nil
    elseif val.__type == "Keybind" then
        -- Handle keybind objects properly
        local keyEnum
        if type(val.value) == "table" and val.value.__type == "EnumItem" then
            keyEnum = unpack(val.value)
        elseif type(val.value) == "string" then
            keyEnum = Enum.KeyCode[val.value]
        end
        
        return {
            keyName = val.keyName,
            value = keyEnum or Enum.KeyCode[val.keyName]
        }
    else
        local out = {}
        for k, v in pairs(val) do
            out[k] = unpack(v)
        end
        return out
    end
end
    
    function diff(old, new)
        local add, del, changed, same = 0, 0, 0, 0
        local omap = {}
        local nmap = {}
        
        local HttpService = game:GetService("HttpService")
        
        for flag, val in pairs(old or {}) do
            if not flag:match("_rainbow$") then
                omap[flag] = val
            end
        end
        
        for flag, val in pairs(new or {}) do
            if not flag:match("_rainbow$") then
                nmap[flag] = val
                
                if omap[flag] then
                    local success, oldVal, newVal = pcall(function()
                        local oldJson = HttpService:JSONEncode(omap[flag])
                        local newJson = HttpService:JSONEncode(val)
                        return oldJson, newVal
                    end)
                    
                    if success and oldVal ~= newVal then
                        changed = changed + 1
                    else
                        same = same + 1
                    end
                else
                    add = add + 1
                end
            end
        end
        
        for flag, _ in pairs(omap) do
            if not nmap[flag] then
                del = del + 1
            end
        end
        
        return add, del, changed, same
    end
    
    sync()
    
    tab:Label("CONFIGURATION SYSTEM")
    
    local nameBox = tab:Textbox("Config Name", false, function() end, "config_name_input")
    
    local menu = tab:NewDropdown("Select Config", cfg.list, function(item)
        cfg.pick = item
    end, false, "config_selector")
    
    local autoLoad = tab:Toggle("Auto Load Selected Config", false, function(on)
        if not (on and cfg.pick) then return end
        
        local path = dir .. "/" .. cfg.pick .. ".json"
        local ok, raw = pcall(readfile, path)
        
        if ok then
            local valid, data = pcall(function() 
                return game:GetService("HttpService"):JSONDecode(raw) 
            end)
            
            if not valid or type(data) ~= "table" then
                library:Notification("Error", "Invalid config format.", "OK")
                return
            end
            
            data.metadata = data.metadata or {}
            data.metadata.autoLoad = true
            data.metadata.lastModified = os.time()
            
            for _, name in ipairs(cfg.list) do
                if name ~= cfg.pick then
                    local other = dir .. "/" .. name .. ".json"
                    local has, file = pcall(readfile, other)
                    
                    if has then
                        local good, info = pcall(function()
                            return game:GetService("HttpService"):JSONDecode(file)
                        end)
                        
                        if good and info.metadata then
                            info.metadata.autoLoad = false
                            pcall(writefile, other, game:GetService("HttpService"):JSONEncode(info))
                        end
                    end
                end
            end
            
            local saved = pcall(writefile, path, game:GetService("HttpService"):JSONEncode(data))
            
            if saved then
                cfg.auto = cfg.pick
                library:Notification("Success", "Auto-load enabled for config: " .. cfg.pick, "OK")
            else
                library:Notification("Error", "Failed to update config file.", "OK")
                autoLoad:set(false)
            end
        else
            library:Notification("Error", "Failed to read config file.", "OK")
            autoLoad:set(false)
        end
    end, "config_autoload")
    
    tab:Button("Create Config", function()
        local name = library.flags["config_name_input"] and library.flags["config_name_input"].value or ""
        
        if name == "" then
            library:Notification("Error", "Please enter a config name.", "OK")
            return
        end
        
        if not name:match("^[%w_]+$") then
            library:Notification("Error", "Config name can only contain letters, numbers, and underscores.", "OK")
            return
        end
        
        for _, item in ipairs(cfg.list) do
            if item:lower() == name:lower() then
                library:Notification("Error", "Config already exists.", "OK")
                return
            end
        end
        
        local data = {
            metadata = {
                createdAt = os.time(),
                lastModified = os.time(),
                autoLoad = false,
                name = name
            },
            values = {}
        }
        
        local count = 0
        for flag, elem in pairs(library.flags) do
            if elem and type(elem) == "table" then
                if not flag:match("_rainbow$") then
                    data.values[flag] = pack(elem)
                    count = count + 1
                end
                
                if type(elem.rainbow) == "boolean" then
                    data.values[flag.."_rainbow"] = elem.rainbow
                end
            end
        end
        
        local path = dir .. "/" .. name .. ".json"
        local ok = pcall(writefile, path, game:GetService("HttpService"):JSONEncode(data))
        
        if ok then
            sync()
            menu:Refresh(cfg.list)
            menu:set(name)
            cfg.pick = name
            nameBox:set("")
            
            library:Notification("Success", "Config \"" .. name .. "\" created with " .. count .. " settings!", "OK")
        else
            library:Notification("Error", "Failed to create config file.", "OK")
        end
    end)

tab:Button("Save/Overwrite Config", function()
    if not cfg.pick then
        library:Notification("Error", "No config selected.", "OK")
        return
    end
    
    local path = dir .. "/" .. cfg.pick .. ".json"
    local old = {}
    
    local ok, raw = pcall(readfile, path)
    if ok then
        local valid, data = pcall(function()
            return game:GetService("HttpService"):JSONDecode(raw)
        end)
        
        if valid and type(data) == "table" and type(data.values) == "table" then
            old = data.values
            data.metadata = data.metadata or {}
            data.metadata.lastModified = os.time()
            data.values = {}
            
            local now = {}
            for flag, elem in pairs(library.flags) do
                if elem and type(elem) == "table" then
                    if not flag:match("_rainbow$") then
                        -- For sliders, directly save the numeric value
                        if type(elem.value) == "number" then
                            data.values[flag] = elem.value
                        elseif (flag:find("[bB]ind") or flag:find("[kK]eybind")) then
                            -- Keybind handling 
                            local keyData = {
                                __type = "Keybind",
                                keyName = elem.keyName or (elem.keyCode and elem.keyCode.Name) or "Unknown"
                            }
                            
                            if elem.keyCode then
                                keyData.value = {
                                    __type = "EnumItem",
                                    enumType = "Enum.KeyCode",
                                    value = elem.keyCode.Name
                                }
                            elseif typeof(elem.value) == "EnumItem" then
                                keyData.value = {
                                    __type = "EnumItem",
                                    enumType = "Enum.KeyCode",
                                    value = elem.value.Name
                                }
                            end
                            
                            data.values[flag] = keyData
                        elseif flag:find("[cC]olor") then
                            -- Color handling
                            local colorData = {
                                __type = "Color3",
                                r = elem.value.R,
                                g = elem.value.G,
                                b = elem.value.B
                            }
                            
                            if elem.rainbow ~= nil then
                                colorData.__rainbow = elem.rainbow
                            end
                            
                            data.values[flag] = colorData
                        else
                            data.values[flag] = pack(elem)
                        end
                        
                        now[flag] = true
                    end
                    
                    if type(elem.rainbow) == "boolean" then
                        data.values[flag.."_rainbow"] = elem.rainbow
                    end
                end
            end
            
            local add, del, changed, same = diff(old, data.values)
            
            ok = pcall(writefile, path, game:GetService("HttpService"):JSONEncode(data))
            
            if ok then
                local msg = ""
                local hasChanges = false
                
                if add > 0 then
                    msg = msg .. add .. " new setting" .. (add > 1 and "s" or "") .. " added"
                    hasChanges = true
                end
                
                if changed > 0 then
                    if msg ~= "" then msg = msg .. ", " end
                    msg = msg .. changed .. " setting" .. (changed > 1 and "s" or "") .. " changed"
                    hasChanges = true
                end
                
                if del > 0 then
                    if msg ~= "" then msg = msg .. ", " end
                    msg = msg .. del .. " setting" .. (del > 1 and "s" or "") .. " removed"
                    hasChanges = true
                end
                
                if not hasChanges then
                    msg = "No settings have been modified"
                end
                
                library:Notification("Config Saved", "\"" .. cfg.pick .. "\": " .. msg, "OK")
            else
                library:Notification("Error", "Failed to save config file.", "OK")
            end
        else
            library:Notification("Error", "Invalid config format.", "OK")
        end
    else
        library:Notification("Error", "Config does not exist.", "OK")
    end
end)

tab:Button("Load Config", function()
    if not cfg.pick then
        return library:Notification("Error", "No config selected.", "OK")
    end
    
    local path = dir .. "/" .. cfg.pick .. ".json"
    local ok, raw = pcall(readfile, path)
    
    if not ok then
        return library:Notification("Error", "Config does not exist.", "OK")
    end
    
    local valid, data = pcall(function() 
        return game:GetService("HttpService"):JSONDecode(raw) 
    end)
    
    if not valid or type(data.values) ~= "table" then
        return library:Notification("Error", "Invalid config format.", "OK")
    end
    
    local loaded = 0
    
    -- First, load all non-slider values
    for flag, val in pairs(data.values) do
        if flag:match("_rainbow$") then continue end
        
        if library.flags[flag] then
            local element = library.flags[flag]
            
            task.spawn(function()
                pcall(function()
                    if type(element) == "table" and type(element.set) == "function" then
                        -- Handle colorpickers
                        if type(val) == "table" and val.__type == "Color3" then
                            local color = Color3.new(val.r, val.g, val.b)
                            element:set(color)
                            loaded = loaded + 1
                        -- Handle keybinds
                        elseif type(val) == "table" and val.__type == "Keybind" then
                            local keyEnum
                            if type(val.value) == "table" and val.value.__type == "EnumItem" then
                                keyEnum = Enum.KeyCode[val.value.value]
                            else
                                keyEnum = Enum.KeyCode[val.keyName]
                            end
                            
                            if keyEnum then
                                element:set(keyEnum)
                            end
                            loaded = loaded + 1
                        -- Handle sliders (direct numeric values)
                        elseif type(val) == "number" then
                            element:set(val)
                            loaded = loaded + 1
                        else
                            local parsed = unpack(val)
                            element:set(parsed)
                            loaded = loaded + 1
                        end
                    end
                end)
            end)
        end
    end
    
    -- Handle rainbow settings in a delayed callback
    task.delay(0.3, function()
        for flag, val in pairs(data.values) do
            if not flag:match("_rainbow$") then continue end
            
            local base = flag:gsub("_rainbow$", "")
            if library.flags[base] and type(library.flags[base].setRainbow) == "function" then
                pcall(function()
                    library.flags[base]:setRainbow(val)
                end)
            end
        end
        
        library:Notification("Config Loaded", "\"" .. cfg.pick .. "\": " .. loaded .. " settings applied", "OK")
    end)
end)
    
    tab:Button("Delete Config", function()
        if not cfg.pick then
            return library:Notification("Error", "No config selected.", "OK")
        end
        
        local path = dir .. "/" .. cfg.pick .. ".json"
        local gone = cfg.pick
        
        local ok = pcall(delfile, path)
        if not ok then
            return library:Notification("Error", "Failed to delete config file.", "OK")
        end
        
        if cfg.auto == cfg.pick then
            cfg.auto = nil
            autoLoad:set(false)
        end
        
        cfg.pick = nil
        sync()
        
        if menu and type(menu.Refresh) == "function" then
            menu:Refresh(cfg.list)
            menu:set(nil)
        end
        
        library:Notification("Success", "Config deleted: \"" .. gone .. "\"", "OK")
    end)
    
    tab:Button("Refresh Config List", function()
        table.clear(cfg.list)
        local items = sync()
        
        if menu then
            if type(menu.Refresh) == "function" then
                menu:Refresh(items)
                if cfg.pick and not table.find(items, cfg.pick) then
                    cfg.pick = nil
                end
                library:Notification("Config List Refreshed", #items .. " configs found", "OK")
            else
                menu = tab:NewDropdown("Select Config", items, function(item)
                    cfg.pick = item
                end, false, "config_selector")
            end
        else
            menu = tab:NewDropdown("Select Config", items, function(item)
                cfg.pick = item
            end, false, "config_selector")
        end
    end)
    
task.spawn(function()
    task.wait(0.5)
    
    if not cfg.auto then return end
    
    local path = dir .. "/" .. cfg.auto .. ".json"
    local ok, raw = pcall(readfile, path)
    
    if not ok then return end
    
    local valid, data = pcall(function() 
        return game:GetService("HttpService"):JSONDecode(raw) 
    end)
    
    if not valid or type(data.values) ~= "table" then return end
    
    local loaded = 0
    
    for flag, val in pairs(data.values) do
        if flag:match("_rainbow$") then continue end
        
        if library.flags[flag] then
            local element = library.flags[flag]
            
            pcall(function()
                if type(element) == "table" and type(element.set) == "function" then
                    -- Handle colorpickers
                    if type(val) == "table" and val.__type == "Color3" then
                        local color = Color3.new(val.r, val.g, val.b)
                        element:set(color)
                        loaded = loaded + 1
                    -- Handle keybinds  
                    elseif type(val) == "table" and val.__type == "Keybind" then
                        local keyEnum
                        if type(val.value) == "table" and val.value.__type == "EnumItem" then
                            keyEnum = Enum.KeyCode[val.value.value]
                        else
                            keyEnum = Enum.KeyCode[val.keyName]
                        end
                        
                        if keyEnum then
                            element:set(keyEnum)
                        end
                        loaded = loaded + 1
                    -- Handle sliders (direct numeric values)
                    elseif type(val) == "number" then
                        -- Direct pass-through to set method
                        element:set(val)
                        loaded = loaded + 1
                    else
                        local parsed = unpack(val)
                        element:set(parsed)
                        loaded = loaded + 1
                    end
                end
            end)
        end
    end
    
    task.delay(0.3, function()
        -- Rainbow settings handling
        for flag, val in pairs(data.values) do
            if not flag:match("_rainbow$") then continue end
            
            local base = flag:gsub("_rainbow$", "")
            if library.flags[base] and type(library.flags[base].setRainbow) == "function" then
                pcall(function()
                    library.flags[base]:setRainbow(val)
                end)
            end
        end
    end)
    
    cfg.pick = cfg.auto
    task.delay(0.2, function()
        pcall(function()
            menu:set(cfg.auto)
            autoLoad:set(true)
        end)
        
        library:Notification("Config Auto-loaded", "\"" .. cfg.auto .. "\": " .. loaded .. " settings applied", "OK")
    end)
end)
    
    return cfg
end
return library
